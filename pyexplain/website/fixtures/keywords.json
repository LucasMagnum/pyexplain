[{"pk": 1, "model": "website.category", "fields": {"description": "", "slug": "palavras-reservadas", "typo": "keywords", "name": "Palavras reservadas"}}, {"pk": 2, "model": "website.category", "fields": {"description": "", "slug": "funcoes-embutidas", "typo": "builtin", "name": "Fun\u00e7\u00f5es Embutidas"}}, {"pk": 3, "model": "website.category", "fields": {"description": "", "slug": "biblioteca-padrao", "typo": "standard", "name": "Biblioteca padr\u00e3o"}}, {"pk": 1, "model": "website.keyword", "fields": {"category": 1, "codname": "and", "slug": "and", "description": "Operador l\u00f3gico 'E'."}}, {"pk": 2, "model": "website.keyword", "fields": {"category": 1, "codname": "as", "slug": "as", "description": ""}}, {"pk": 3, "model": "website.keyword", "fields": {"category": 1, "codname": "assert", "slug": "assert", "description": "Serve para garantir que o resultado de uma opera\u00e7\u00e3o seja verdadeiro.\r\nExemplo: assert True == True\r\nCaso a express\u00e3o retorne um valor falso, ser\u00e1 gerado uma exce\u00e7\u00e3o no c\u00f3digo."}}, {"pk": 4, "model": "website.keyword", "fields": {"category": 1, "codname": "break", "slug": "break", "description": "Serve para interromper um la\u00e7o de repeti\u00e7\u00e3o."}}, {"pk": 5, "model": "website.keyword", "fields": {"category": 1, "codname": "class", "slug": "class", "description": "Serve para definir uma classe em Python.\r\nExemplo: \r\nclass Cachorro(object):pass\r\n"}}, {"pk": 6, "model": "website.keyword", "fields": {"category": 1, "codname": "continue", "slug": "continue", "description": "Em la\u00e7os de repeti\u00e7\u00e3o, `continue` serve para saltar e ir direto para o pr\u00f3ximo la\u00e7o."}}, {"pk": 7, "model": "website.keyword", "fields": {"category": 1, "codname": "def", "slug": "def", "description": "Serve para definir fun\u00e7\u00f5es."}}, {"pk": 8, "model": "website.keyword", "fields": {"category": 1, "codname": "del", "slug": "del", "description": "Serve para apagar a refer\u00eancia a um objeto."}}, {"pk": 9, "model": "website.keyword", "fields": {"category": 1, "codname": "elif", "slug": "elif", "description": ""}}, {"pk": 10, "model": "website.keyword", "fields": {"category": 1, "codname": "else", "slug": "else", "description": ""}}, {"pk": 11, "model": "website.keyword", "fields": {"category": 1, "codname": "except", "slug": "except", "description": "Usado para tratamento de exce\u00e7\u00f5es, quando executado quer dizer houve uma exce\u00e7\u00e3o no escopo do bloco ao qual est\u00e1 inclu\u00eddo."}}, {"pk": 12, "model": "website.keyword", "fields": {"category": 1, "codname": "exec", "slug": "exec", "description": "Utilizado para executar algum c\u00f3digo Python.\r\nExemplo: exec(\"print 'hello world'\")"}}, {"pk": 13, "model": "website.keyword", "fields": {"category": 1, "codname": "finally", "slug": "finally", "description": "\u00c9 utilizado para tratamento de exce\u00e7\u00f5es. O c\u00f3digo contido dentro deste bloco, ser\u00e1 sempre executado."}}, {"pk": 14, "model": "website.keyword", "fields": {"category": 1, "codname": "for", "slug": "for", "description": ""}}, {"pk": 15, "model": "website.keyword", "fields": {"category": 1, "codname": "from", "slug": "from", "description": "Serve para definir de qual m\u00f3dulo deseja importar algum item.\r\nExemplo: from &ltmodulo_nome&gt import &ltitem_nome&gt"}}, {"pk": 16, "model": "website.keyword", "fields": {"category": 1, "codname": "global", "slug": "global", "description": ""}}, {"pk": 17, "model": "website.keyword", "fields": {"category": 1, "codname": "if", "slug": "if", "description": "Utilizado para controle de fluxo. 'If' ou 'Se' \u00e9 utilizado para verificar se determinar condi\u00e7\u00e3o \u00e9 verdadeira.\r\nCaso seja verdadeira, entrar\u00e1 no bloco 'If' do contr\u00e1rio no bloco 'elif' ou 'else', o que vier primeiro.\r\nExemplo: if True: pass # Se verdadeiro, n\u00e3o fa\u00e7a nada.\r\n"}}, {"pk": 18, "model": "website.keyword", "fields": {"category": 1, "codname": "import", "slug": "import", "description": "Serve para importar m\u00f3dulos Python.\r\nExemplo: import &ltmodulo_nome&gt"}}, {"pk": 19, "model": "website.keyword", "fields": {"category": 1, "codname": "in", "slug": "in", "description": "Utilizado para verificar a exist\u00eancia de um determinado item dentro de uma cole\u00e7\u00e3o.\r\nExemplo: 'c\u00f3digo' in 'c\u00f3digo python' # retorna verdadeiro, pois 'c\u00f3digo' est\u00e1 contido em 'c\u00f3digo python'"}}, {"pk": 20, "model": "website.keyword", "fields": {"category": 1, "codname": "is", "slug": "is", "description": ""}}, {"pk": 21, "model": "website.keyword", "fields": {"category": 1, "codname": "lambda", "slug": "lambda", "description": " \u00e9 uma palavra chave do python que \u00e9 utilizada para definir pequenas fun\u00e7\u00f5es an\u00f4nimas. Esta \u00e9 uma das caracter\u00edsticas que o Python emprestou das linguagens funcionais mais famosas."}}, {"pk": 22, "model": "website.keyword", "fields": {"category": 1, "codname": "not", "slug": "not", "description": "Operador l\u00f3gico de nega\u00e7\u00e3o.\r\nExemplo: not u\"Pol\u00edticos honestos\""}}, {"pk": 23, "model": "website.keyword", "fields": {"category": 1, "codname": "or", "slug": "or", "description": ""}}, {"pk": 24, "model": "website.keyword", "fields": {"category": 1, "codname": "pass", "slug": "pass", "description": "\u00c9 uma opera\u00e7\u00e3o nula, quando executada nada acontece. \r\nExemplo: if False: pass \r\nSe for falso, nada acontece."}}, {"pk": 25, "model": "website.keyword", "fields": {"category": 1, "codname": "print", "slug": "print", "description": "Serve para exibir informa\u00e7\u00f5es no console.\r\nExemplo: print \"Hello world.\""}}, {"pk": 26, "model": "website.keyword", "fields": {"category": 1, "codname": "raise", "slug": "raise", "description": "Geralmente \u00e9 utilizado quando algo n\u00e3o ocorre corretamente e voc\u00ea deseja gerar uma exce\u00e7\u00e3o.\r\nExemplo: raise ValueError(\"N\u00e3o executado corretamente\")"}}, {"pk": 27, "model": "website.keyword", "fields": {"category": 1, "codname": "return", "slug": "return", "description": "Serve para retornar valores, se utilizada sem nenhum valor, retornar\u00e1 None.\r\nExemplo: return u\"Resultado \u00e9 15\""}}, {"pk": 28, "model": "website.keyword", "fields": {"category": 1, "codname": "try", "slug": "try", "description": ""}}, {"pk": 29, "model": "website.keyword", "fields": {"category": 1, "codname": "while", "slug": "while", "description": "Serve para definir la\u00e7os de repeti\u00e7\u00e3o. \r\nExemplo: while True: print \"verdade\" # Enquanto for verdade, exiba \"verdade\" na tela.\r\n"}}, {"pk": 30, "model": "website.keyword", "fields": {"category": 1, "codname": "with", "slug": "with", "description": ""}}, {"pk": 31, "model": "website.keyword", "fields": {"category": 1, "codname": "yield", "slug": "yield", "description": ""}}, {"pk": 418, "model": "website.keyword", "fields": {"category": 3, "codname": "string", "slug": "string", "description": "A collection of string operations (most are no longer used).\n\nWarning: most of the code you see here isn't normally used nowadays.\nBeginning with Python 1.6, many of these functions are implemented as\nmethods on the standard string object. They used to be implemented by\na built-in module called strop, but strop is now obsolete itself.\n\nPublic module variables:\n\nwhitespace -- a string containing all characters considered whitespace\nlowercase -- a string containing all characters considered lowercase letters\nuppercase -- a string containing all characters considered uppercase letters\nletters -- a string containing all characters considered letters\ndigits -- a string containing all characters considered decimal digits\nhexdigits -- a string containing all characters considered hexadecimal digits\noctdigits -- a string containing all characters considered octal digits\npunctuation -- a string containing all characters considered punctuation\nprintable -- a string containing all characters considered printable\n\n"}}, {"pk": 419, "model": "website.keyword", "fields": {"category": 3, "codname": "re", "slug": "re", "description": "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9].\n    \\D       Matches any non-digit character; equivalent to the set [^0-9].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].\n    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match    Match a regular expression pattern to the beginning of a string.\n    search   Search a string for the presence of a pattern.\n    sub      Substitute occurrences of a pattern found in a string.\n    subn     Same as sub, but also return the number of substitutions made.\n    split    Split a string by the occurrences of a pattern.\n    findall  Find all occurrences of a pattern in a string.\n    finditer Return an iterator yielding a match object for each match.\n    compile  Compile a pattern into a RegexObject.\n    purge    Clear the regular expression cache.\n    escape   Backslash all non-alphanumerics in a string.\n\nSome of the functions in this module takes flags as optional parameters:\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.\n\nThis module also defines an exception 'error'.\n\n"}}, {"pk": 420, "model": "website.keyword", "fields": {"category": 3, "codname": "struct", "slug": "struct", "description": "Functions to convert between Python values and C structs represented\nas Python strings. It uses format strings (explained below) as compact\ndescriptions of the lay-out of the C structs and the intended conversion\nto/from Python values.\n\nThe optional first format char indicates byte order, size and alignment:\n  @: native order, size & alignment (default)\n  =: native order, std. size & alignment\n  <: little-endian, std. size & alignment\n  >: big-endian, std. size & alignment\n  !: same as >\n\nThe remaining chars indicate types of args and must match exactly;\nthese can be preceded by a decimal repeat count:\n  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;\n  ?: _Bool (requires C99; if not available, char is used instead)\n  h:short; H:unsigned short; i:int; I:unsigned int;\n  l:long; L:unsigned long; f:float; d:double.\nSpecial cases (preceding decimal count indicates length):\n  s:string (array of char); p: pascal string (with count byte).\nSpecial case (only available in native format):\n  P:an integer type that is wide enough to hold a pointer.\nSpecial case (not in native mode unless 'long long' in platform C):\n  q:long long; Q:unsigned long long\nWhitespace between formats is ignored.\n\nThe variable struct.error is an exception raised on errors.\n"}}, {"pk": 421, "model": "website.keyword", "fields": {"category": 3, "codname": "difflib", "slug": "difflib", "description": "\nModule difflib -- helpers for computing deltas between objects.\n\nFunction get_close_matches(word, possibilities, n=3, cutoff=0.6):\n    Use SequenceMatcher to return list of the best \"good enough\" matches.\n\nFunction context_diff(a, b):\n    For two lists of strings, return a delta in context diff format.\n\nFunction ndiff(a, b):\n    Return a delta: the difference between `a` and `b` (lists of strings).\n\nFunction restore(delta, which):\n    Return one of the two sequences that generated an ndiff delta.\n\nFunction unified_diff(a, b):\n    For two lists of strings, return a delta in unified diff format.\n\nClass SequenceMatcher:\n    A flexible class for comparing pairs of sequences of any type.\n\nClass Differ:\n    For producing human-readable deltas from sequences of lines of text.\n\nClass HtmlDiff:\n    For producing HTML side by side comparison with change highlights.\n"}}, {"pk": 422, "model": "website.keyword", "fields": {"category": 3, "codname": "textwrap", "slug": "textwrap", "description": "Text wrapping and filling.\n"}}, {"pk": 423, "model": "website.keyword", "fields": {"category": 3, "codname": "codecs", "slug": "codecs", "description": " codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n"}}, {"pk": 424, "model": "website.keyword", "fields": {"category": 3, "codname": "unicodedata", "slug": "unicodedata", "description": "This module provides access to the Unicode Character Database which\ndefines character properties for all Unicode characters. The data in\nthis database is based on the UnicodeData.txt file version\n5.2.0 which is publically available from ftp://ftp.unicode.org/.\n\nThe module uses the same names and symbols as defined by the\nUnicodeData File Format 5.2.0 (see\nhttp://www.unicode.org/reports/tr44/tr44-4.html)."}}, {"pk": 425, "model": "website.keyword", "fields": {"category": 3, "codname": "stringprep", "slug": "stringprep", "description": "Library that exposes various tables found in the StringPrep RFC 3454.\n\nThere are two kinds of tables: sets, for which a member test is provided,\nand mappings, for which a mapping function is provided.\n"}}, {"pk": 426, "model": "website.keyword", "fields": {"category": 3, "codname": "fpformat", "slug": "fpformat", "description": "General floating point formatting functions.\n\nFunctions:\nfix(x, digits_behind)\nsci(x, digits_behind)\n\nEach takes a number or a string and a number of digits as arguments.\n\nParameters:\nx:             number to be formatted; or a string resembling a number\ndigits_behind: number of digits behind the decimal point\n"}}, {"pk": 427, "model": "website.keyword", "fields": {"category": 3, "codname": "datetime", "slug": "datetime", "description": "Fast implementation of the datetime type."}}, {"pk": 428, "model": "website.keyword", "fields": {"category": 3, "codname": "calendar", "slug": "calendar", "description": "Calendar printing functions\n\nNote when comparing these calendars to the ones printed by cal(1): By\ndefault, these calendars have Monday as the first day of the week, and\nSunday as the last (the European convention). Use setfirstweekday() to\nset the first day of the week (0=Monday, 6=Sunday)."}}, {"pk": 429, "model": "website.keyword", "fields": {"category": 3, "codname": "collections", "slug": "collections", "description": ""}}, {"pk": 430, "model": "website.keyword", "fields": {"category": 3, "codname": "heapq", "slug": "heapq", "description": "Heap queue algorithm (a.k.a. priority queue).\n\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\n\nUsage:\n\nheap = []            # creates an empty heap\nheappush(heap, item) # pushes a new item on the heap\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\n\nOur API differs from textbook heap algorithms as follows:\n\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n\n- Our heappop() method returns the smallest item, not the largest.\n\nThese two make it possible to view the heap as a regular Python list\nwithout surprises: heap[0] is the smallest item, and heap.sort()\nmaintains the heap invariant!\n"}}, {"pk": 431, "model": "website.keyword", "fields": {"category": 3, "codname": "bisect", "slug": "bisect", "description": "Bisection algorithms."}}, {"pk": 432, "model": "website.keyword", "fields": {"category": 3, "codname": "array", "slug": "array", "description": "This module defines an object type which can efficiently represent\nan array of basic values: characters, integers, floating point\nnumbers.  Arrays are sequence types and behave very much like lists,\nexcept that the type of objects stored in them is constrained.  The\ntype is specified at object creation time by using a type code, which\nis a single character.  The following type codes are defined:\n\n    Type code   C Type             Minimum size in bytes \n    'c'         character          1 \n    'b'         signed integer     1 \n    'B'         unsigned integer   1 \n    'u'         Unicode character  2 \n    'h'         signed integer     2 \n    'H'         unsigned integer   2 \n    'i'         signed integer     2 \n    'I'         unsigned integer   2 \n    'l'         signed integer     4 \n    'L'         unsigned integer   4 \n    'f'         floating point     4 \n    'd'         floating point     8 \n\nThe constructor is:\n\narray(typecode [, initializer]) -- create a new array\n"}}, {"pk": 433, "model": "website.keyword", "fields": {"category": 3, "codname": "sets", "slug": "sets", "description": "Classes to represent arbitrary sets (including sets of sets).\n\nThis module implements sets using dictionaries whose values are\nignored.  The usual operations (union, intersection, deletion, etc.)\nare provided as both methods and operators.\n\nImportant: sets are not sequences!  While they support 'x in s',\n'len(s)', and 'for x in s', none of those operations are unique for\nsequences; for example, mappings support all three as well.  The\ncharacteristic operation for sequences is subscripting with small\nintegers: s[i], for i in range(len(s)).  Sets don't support\nsubscripting at all.  Also, sequences allow multiple occurrences and\ntheir elements have a definite order; sets on the other hand don't\nrecord multiple occurrences and don't remember the order of element\ninsertion (which is why they don't support s[i]).\n\nThe following classes are provided:\n\nBaseSet -- All the operations common to both mutable and immutable\n    sets. This is an abstract class, not meant to be directly\n    instantiated.\n\nSet -- Mutable sets, subclass of BaseSet; not hashable.\n\nImmutableSet -- Immutable sets, subclass of BaseSet; hashable.\n    An iterable argument is mandatory to create an ImmutableSet.\n\n_TemporarilyImmutableSet -- A wrapper around a Set, hashable,\n    giving the same hash value as the immutable set equivalent\n    would have.  Do not use this class directly.\n\nOnly hashable objects can be added to a Set. In particular, you cannot\nreally add a Set as an element to another Set; if you try, what is\nactually added is an ImmutableSet built from it (it compares equal to\nthe one you tried adding).\n\nWhen you ask if `x in y' where x is a Set and y is a Set or\nImmutableSet, x is wrapped into a _TemporarilyImmutableSet z, and\nwhat's tested is actually `z in y'.\n\n"}}, {"pk": 434, "model": "website.keyword", "fields": {"category": 3, "codname": "sched", "slug": "sched", "description": "A generally useful event scheduler class.\n\nEach instance of this class manages its own queue.\nNo multi-threading is implied; you are supposed to hack that\nyourself, or use a single instance per application.\n\nEach instance is parametrized with two functions, one that is\nsupposed to return the current time, one that is supposed to\nimplement a delay.  You can implement real-time scheduling by\nsubstituting time and sleep from built-in module time, or you can\nimplement simulated time by writing your own functions.  This can\nalso be used to integrate scheduling with STDWIN events; the delay\nfunction is allowed to modify the queue.  Time can be expressed as\nintegers or floating point numbers, as long as it is consistent.\n\nEvents are specified by tuples (time, priority, action, argument).\nAs in UNIX, lower priority numbers mean higher priority; in this\nway the queue can be maintained as a priority queue.  Execution of the\nevent means calling the action function, passing it the argument\nsequence in \"argument\" (remember that in Python, multiple function\narguments are be packed in a sequence).\nThe action function may be an instance method so it\nhas another way to reference private data (besides global variables).\n"}}, {"pk": 435, "model": "website.keyword", "fields": {"category": 3, "codname": "mutex", "slug": "mutex", "description": "Mutual exclusion -- for use with module sched\n\nA mutex has two pieces of state -- a 'locked' bit and a queue.\nWhen the mutex is not locked, the queue is empty.\nOtherwise, the queue contains 0 or more (function, argument) pairs\nrepresenting functions (or methods) waiting to acquire the lock.\nWhen the mutex is unlocked while the queue is not empty,\nthe first queue entry is removed and its function(argument) pair called,\nimplying it now has the lock.\n\nOf course, no multi-threading is implied -- hence the funny interface\nfor lock, where a function is called once the lock is aquired.\n"}}, {"pk": 436, "model": "website.keyword", "fields": {"category": 3, "codname": "weakref", "slug": "weakref", "description": "Weak reference support for Python.\n\nThis module is an implementation of PEP 205:\n\nhttp://www.python.org/dev/peps/pep-0205/\n"}}, {"pk": 437, "model": "website.keyword", "fields": {"category": 3, "codname": "types", "slug": "types", "description": "Define names for all type symbols known in the standard interpreter.\n\nTypes that are part of optional modules (e.g. array) are not listed.\n"}}, {"pk": 438, "model": "website.keyword", "fields": {"category": 3, "codname": "new", "slug": "new", "description": "Create new objects of various types.  Deprecated.\n\nThis module is no longer required except for backward compatibility.\nObjects of most types can now be created by calling the type object.\n"}}, {"pk": 439, "model": "website.keyword", "fields": {"category": 3, "codname": "copy", "slug": "copy", "description": "Generic (shallow and deep) copying operations.\n\nInterface summary:\n\n        import copy\n\n        x = copy.copy(y)        # make a shallow copy of y\n        x = copy.deepcopy(y)    # make a deep copy of y\n\nFor module specific errors, copy.Error is raised.\n\nThe difference between shallow and deep copying is only relevant for\ncompound objects (objects that contain other objects, like lists or\nclass instances).\n\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\n\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop\n\n b) because deep copy copies *everything* it may copy too much, e.g.\n    administrative data structures that should be shared even between\n    copies\n\nPython's deep copy operation avoids these problems by:\n\n a) keeping a table of objects already copied during the current\n    copying pass\n\n b) letting user-defined classes override the copying operation or the\n    set of components copied\n\nThis version does not copy types like module, class, function, method,\nnor stack trace, stack frame, nor file, socket, window, nor array, nor\nany similar types.\n\nClasses can use the same interfaces to control copying that they use\nto control pickling: they can define methods called __getinitargs__(),\n__getstate__() and __setstate__().  See the documentation for module\n\"pickle\" for information on these methods.\n"}}, {"pk": 440, "model": "website.keyword", "fields": {"category": 3, "codname": "pprint", "slug": "pprint", "description": "Support to pretty-print lists, tuples, & dictionaries recursively.\n\nVery simple, but useful, especially in debugging data structures.\n\nClasses\n-------\n\nPrettyPrinter()\n    Handle pretty-printing operations onto a stream using a configured\n    set of formatting parameters.\n\nFunctions\n---------\n\npformat()\n    Format a Python object into a pretty-printed representation.\n\npprint()\n    Pretty-print a Python object to a stream [default is sys.stdout].\n\nsaferepr()\n    Generate a 'standard' repr()-like value, but protect against recursive\n    data structures.\n\n"}}, {"pk": 442, "model": "website.keyword", "fields": {"category": 3, "codname": "numbers", "slug": "numbers", "description": "Abstract Base Classes (ABCs) for numbers, according to PEP 3141.\n\nTODO: Fill out more detailed documentation on the operators."}}, {"pk": 443, "model": "website.keyword", "fields": {"category": 3, "codname": "math", "slug": "math", "description": "This module is always available.  It provides access to the\nmathematical functions defined by the C standard."}}, {"pk": 444, "model": "website.keyword", "fields": {"category": 3, "codname": "cmath", "slug": "cmath", "description": "This module is always available. It provides access to mathematical\nfunctions for complex numbers."}}, {"pk": 445, "model": "website.keyword", "fields": {"category": 3, "codname": "decimal", "slug": "decimal", "description": "\nThis is a Py2.3 implementation of decimal floating point arithmetic based on\nthe General Decimal Arithmetic Specification:\n\n    http://speleotrove.com/decimal/decarith.html\n\nand IEEE standard 854-1987:\n\n    www.cs.berkeley.edu/~ejr/projects/754/private/drafts/854-1987/dir.html\n\nDecimal floating point has finite precision with arbitrarily large bounds.\n\nThe purpose of this module is to support arithmetic using familiar\n\"schoolhouse\" rules and to avoid some of the tricky representation\nissues associated with binary floating point.  The package is especially\nuseful for financial applications or for contexts where users have\nexpectations that are at odds with binary floating point (for instance,\nin binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead\nof the expected Decimal('0.00') returned by decimal floating point).\n\nHere are some examples of using the decimal module:\n\n>>> from decimal import *\n>>> setcontext(ExtendedContext)\n>>> Decimal(0)\nDecimal('0')\n>>> Decimal('1')\nDecimal('1')\n>>> Decimal('-.0123')\nDecimal('-0.0123')\n>>> Decimal(123456)\nDecimal('123456')\n>>> Decimal('123.45e12345678901234567890')\nDecimal('1.2345E+12345678901234567892')\n>>> Decimal('1.33') + Decimal('1.27')\nDecimal('2.60')\n>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')\nDecimal('-2.20')\n>>> dig = Decimal(1)\n>>> print dig / Decimal(3)\n0.333333333\n>>> getcontext().prec = 18\n>>> print dig / Decimal(3)\n0.333333333333333333\n>>> print dig.sqrt()\n1\n>>> print Decimal(3).sqrt()\n1.73205080756887729\n>>> print Decimal(3) ** 123\n4.85192780976896427E+58\n>>> inf = Decimal(1) / Decimal(0)\n>>> print inf\nInfinity\n>>> neginf = Decimal(-1) / Decimal(0)\n>>> print neginf\n-Infinity\n>>> print neginf + inf\nNaN\n>>> print neginf * inf\n-Infinity\n>>> print dig / 0\nInfinity\n>>> getcontext().traps[DivisionByZero] = 1\n>>> print dig / 0\nTraceback (most recent call last):\n  ...\n  ...\n  ...\nDivisionByZero: x / 0\n>>> c = Context()\n>>> c.traps[InvalidOperation] = 0\n>>> print c.flags[InvalidOperation]\n0\n>>> c.divide(Decimal(0), Decimal(0))\nDecimal('NaN')\n>>> c.traps[InvalidOperation] = 1\n>>> print c.flags[InvalidOperation]\n1\n>>> c.flags[InvalidOperation] = 0\n>>> print c.flags[InvalidOperation]\n0\n>>> print c.divide(Decimal(0), Decimal(0))\nTraceback (most recent call last):\n  ...\n  ...\n  ...\nInvalidOperation: 0 / 0\n>>> print c.flags[InvalidOperation]\n1\n>>> c.flags[InvalidOperation] = 0\n>>> c.traps[InvalidOperation] = 0\n>>> print c.divide(Decimal(0), Decimal(0))\nNaN\n>>> print c.flags[InvalidOperation]\n1\n>>>\n"}}, {"pk": 446, "model": "website.keyword", "fields": {"category": 3, "codname": "fractions", "slug": "fractions", "description": "Rational, infinite-precision, real numbers."}}, {"pk": 447, "model": "website.keyword", "fields": {"category": 3, "codname": "random", "slug": "random", "description": "Random variable generators.\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* Without a direct way to compute N steps forward, the semantics of\n  jumpahead(n) are weakened to simply jump to another distant state and rely\n  on the large period to avoid overlapping sequences.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n"}}, {"pk": 448, "model": "website.keyword", "fields": {"category": 3, "codname": "itertools", "slug": "itertools", "description": "Functional tools for creating and using iterators.\n\nInfinite iterators:\ncount([n]) --> n, n+1, n+2, ...\ncycle(p) --> p0, p1, ... plast, p0, p1, ...\nrepeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times\n\nIterators terminating on the shortest input sequence:\nchain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... \ncompress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...\ndropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails\ngroupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)\nifilter(pred, seq) --> elements of seq where pred(elem) is True\nifilterfalse(pred, seq) --> elements of seq where pred(elem) is False\nislice(seq, [start,] stop [, step]) --> elements from\n       seq[start:stop:step]\nimap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...\nstarmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...\ntee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n\ntakewhile(pred, seq) --> seq[0], seq[1], until pred fails\nizip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... \nizip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... \n\nCombinatoric generators:\nproduct(p, q, ... [repeat=1]) --> cartesian product\npermutations(p[, r])\ncombinations(p, r)\ncombinations_with_replacement(p, r)\n"}}, {"pk": 449, "model": "website.keyword", "fields": {"category": 3, "codname": "functools", "slug": "functools", "description": "functools.py - Tools for working with functions and callable objects\n"}}, {"pk": 450, "model": "website.keyword", "fields": {"category": 3, "codname": "operator", "slug": "operator", "description": "Operator interface.\n\nThis module exports a set of functions implemented in C corresponding\nto the intrinsic operators of Python.  For example, operator.add(x, y)\nis equivalent to the expression x+y.  The function names are those\nused for special methods; variants without leading and trailing\n'__' are also provided for convenience."}}, {"pk": 451, "model": "website.keyword", "fields": {"category": 3, "codname": "fileinput", "slug": "fileinput", "description": "Helper class to quickly write a loop over all standard input files.\n\nTypical use is:\n\n    import fileinput\n    for line in fileinput.input():\n        process(line)\n\nThis iterates over the lines of all files listed in sys.argv[1:],\ndefaulting to sys.stdin if the list is empty.  If a filename is '-' it\nis also replaced by sys.stdin.  To specify an alternative list of\nfilenames, pass it as the argument to input().  A single file name is\nalso allowed.\n\nFunctions filename(), lineno() return the filename and cumulative line\nnumber of the line that has just been read; filelineno() returns its\nline number in the current file; isfirstline() returns true iff the\nline just read is the first line of its file; isstdin() returns true\niff the line was read from sys.stdin.  Function nextfile() closes the\ncurrent file so that the next iteration will read the first line from\nthe next file (if any); lines not read from the file will not count\ntowards the cumulative line count; the filename is not changed until\nafter the first line of the next file has been read.  Function close()\ncloses the sequence.\n\nBefore any lines have been read, filename() returns None and both line\nnumbers are zero; nextfile() has no effect.  After all lines have been\nread, filename() and the line number functions return the values\npertaining to the last line read; nextfile() has no effect.\n\nAll files are opened in text mode by default, you can override this by\nsetting the mode parameter to input() or FileInput.__init__().\nIf an I/O error occurs during opening or reading a file, the IOError\nexception is raised.\n\nIf sys.stdin is used more than once, the second and further use will\nreturn no lines, except perhaps for interactive use, or if it has been\nexplicitly reset (e.g. using sys.stdin.seek(0)).\n\nEmpty files are opened and immediately closed; the only time their\npresence in the list of filenames is noticeable at all is when the\nlast file opened is empty.\n\nIt is possible that the last line of a file doesn't end in a newline\ncharacter; otherwise lines are returned including the trailing\nnewline.\n\nClass FileInput is the implementation; its methods filename(),\nlineno(), fileline(), isfirstline(), isstdin(), nextfile() and close()\ncorrespond to the functions in the module.  In addition it has a\nreadline() method which returns the next input line, and a\n__getitem__() method which implements the sequence behavior.  The\nsequence must be accessed in strictly sequential order; sequence\naccess and readline() cannot be mixed.\n\nOptional in-place filtering: if the keyword argument inplace=1 is\npassed to input() or to the FileInput constructor, the file is moved\nto a backup file and standard output is directed to the input file.\nThis makes it possible to write a filter that rewrites its input file\nin place.  If the keyword argument backup=\".<some extension>\" is also\ngiven, it specifies the extension for the backup file, and the backup\nfile remains around; by default, the extension is \".bak\" and it is\ndeleted when the output file is closed.  In-place filtering is\ndisabled when standard input is read.  XXX The current implementation\ndoes not work for MS-DOS 8+3 filesystems.\n\nPerformance: this module is unfortunately one of the slower ways of\nprocessing large numbers of input lines.  Nevertheless, a significant\nspeed-up has been obtained by using readlines(bufsize) instead of\nreadline().  A new keyword argument, bufsize=N, is present on the\ninput() function and the FileInput() class to override the default\nbuffer size.\n\nXXX Possible additions:\n\n- optional getopt argument processing\n- isatty()\n- read(), read(size), even readlines()\n\n"}}, {"pk": 452, "model": "website.keyword", "fields": {"category": 3, "codname": "stat", "slug": "stat", "description": "Constants/functions for interpreting results of os.stat() and os.lstat().\n\nSuggested usage: from stat import *\n"}}, {"pk": 453, "model": "website.keyword", "fields": {"category": 3, "codname": "statvfs", "slug": "statvfs", "description": "Constants for interpreting the results of os.statvfs() and os.fstatvfs()."}}, {"pk": 454, "model": "website.keyword", "fields": {"category": 3, "codname": "filecmp", "slug": "filecmp", "description": "Utilities for comparing files and directories.\n\nClasses:\n    dircmp\n\nFunctions:\n    cmp(f1, f2, shallow=1) -> int\n    cmpfiles(a, b, common) -> ([], [], [])\n\n"}}, {"pk": 455, "model": "website.keyword", "fields": {"category": 3, "codname": "tempfile", "slug": "tempfile", "description": "Temporary files.\n\nThis module provides generic, low- and high-level interfaces for\ncreating temporary files and directories.  The interfaces listed\nas \"safe\" just below can be used without fear of race conditions.\nThose listed as \"unsafe\" cannot, and are provided for backward\ncompatibility only.\n\nThis module also provides some data items to the user:\n\n  TMP_MAX  - maximum number of names that will be tried before\n             giving up.\n  template - the default prefix for all temporary names.\n             You may change this to control the default prefix.\n  tempdir  - If this is set to a string before the first use of\n             any routine from this module, it will be considered as\n             another candidate location to store temporary files.\n"}}, {"pk": 456, "model": "website.keyword", "fields": {"category": 3, "codname": "glob", "slug": "glob", "description": "Filename globbing utility."}}, {"pk": 457, "model": "website.keyword", "fields": {"category": 3, "codname": "fnmatch", "slug": "fnmatch", "description": "Filename matching with shell patterns.\n\nfnmatch(FILENAME, PATTERN) matches according to the local convention.\nfnmatchcase(FILENAME, PATTERN) always takes case in account.\n\nThe functions operate by translating the pattern into a regular\nexpression.  They cache the compiled regular expressions for speed.\n\nThe function translate(PATTERN) returns a regular expression\ncorresponding to PATTERN.  (It does not compile it.)\n"}}, {"pk": 458, "model": "website.keyword", "fields": {"category": 3, "codname": "linecache", "slug": "linecache", "description": "Cache lines from files.\n\nThis is intended to read lines from modules imported -- hence if a filename\nis not found, it will look down the module search path for a file by\nthat name.\n"}}, {"pk": 459, "model": "website.keyword", "fields": {"category": 3, "codname": "shutil", "slug": "shutil", "description": "Utility functions for copying and archiving files and directory trees.\n\nXXX The functions here don't copy the resource fork or other metadata on Mac.\n\n"}}, {"pk": 460, "model": "website.keyword", "fields": {"category": 3, "codname": "dircache", "slug": "dircache", "description": "Read and cache directory listings.\n\nThe listdir() routine returns a sorted list of the files in a directory,\nusing a cache to avoid reading the directory more often than necessary.\nThe annotate() routine appends slashes to directories."}}, {"pk": 461, "model": "website.keyword", "fields": {"category": 3, "codname": "macpath", "slug": "macpath", "description": "Pathname and path-related operations for the Macintosh."}}, {"pk": 462, "model": "website.keyword", "fields": {"category": 3, "codname": "pickle", "slug": "pickle", "description": "Create portable serialized representations of Python objects.\n\nSee module cPickle for a (much) faster implementation.\nSee module copy_reg for a mechanism for registering custom picklers.\nSee module pickletools source for extensive comments.\n\nClasses:\n\n    Pickler\n    Unpickler\n\nFunctions:\n\n    dump(object, file)\n    dumps(object) -> string\n    load(file) -> object\n    loads(string) -> object\n\nMisc variables:\n\n    __version__\n    format_version\n    compatible_formats\n\n"}}, {"pk": 463, "model": "website.keyword", "fields": {"category": 3, "codname": "copy_reg", "slug": "copy_reg", "description": "Helper to provide extensibility for pickle/cPickle.\n\nThis is only useful to add pickle support for extension types defined in\nC, not for instances of user-defined classes.\n"}}, {"pk": 464, "model": "website.keyword", "fields": {"category": 3, "codname": "shelve", "slug": "shelve", "description": "Manage shelves of pickled objects.\n\nA \"shelf\" is a persistent, dictionary-like object.  The difference\nwith dbm databases is that the values (not the keys!) in a shelf can\nbe essentially arbitrary Python objects -- anything that the \"pickle\"\nmodule can handle.  This includes most class instances, recursive data\ntypes, and objects containing lots of shared sub-objects.  The keys\nare ordinary strings.\n\nTo summarize the interface (key is a string, data is an arbitrary\nobject):\n\n        import shelve\n        d = shelve.open(filename) # open, with (g)dbm filename -- no suffix\n\n        d[key] = data   # store data at key (overwrites old data if\n                        # using an existing key)\n        data = d[key]   # retrieve a COPY of the data at key (raise\n                        # KeyError if no such key) -- NOTE that this\n                        # access returns a *copy* of the entry!\n        del d[key]      # delete data stored at key (raises KeyError\n                        # if no such key)\n        flag = d.has_key(key)   # true if the key exists; same as \"key in d\"\n        list = d.keys() # a list of all existing keys (slow!)\n\n        d.close()       # close it\n\nDependent on the implementation, closing a persistent dictionary may\nor may not be necessary to flush changes to disk.\n\nNormally, d[key] returns a COPY of the entry.  This needs care when\nmutable entries are mutated: for example, if d[key] is a list,\n        d[key].append(anitem)\ndoes NOT modify the entry d[key] itself, as stored in the persistent\nmapping -- it only modifies the copy, which is then immediately\ndiscarded, so that the append has NO effect whatsoever.  To append an\nitem to d[key] in a way that will affect the persistent mapping, use:\n        data = d[key]\n        data.append(anitem)\n        d[key] = data\n\nTo avoid the problem with mutable entries, you may pass the keyword\nargument writeback=True in the call to shelve.open.  When you use:\n        d = shelve.open(filename, writeback=True)\nthen d keeps a cache of all entries you access, and writes them all back\nto the persistent mapping when you call d.close().  This ensures that\nsuch usage as d[key].append(anitem) works as intended.\n\nHowever, using keyword argument writeback=True may consume vast amount\nof memory for the cache, and it may make d.close() very slow, if you\naccess many of d's entries after opening it in this way: d has no way to\ncheck which of the entries you access are mutable and/or which ones you\nactually mutate, so it must cache, and write back at close, all of the\nentries that you access.  You can call d.sync() to write back all the\nentries in the cache, and empty the cache (d.sync() also synchronizes\nthe persistent dictionary on disk, if feasible).\n"}}, {"pk": 465, "model": "website.keyword", "fields": {"category": 3, "codname": "marshal", "slug": "marshal", "description": "This module contains functions that can read and write Python values in\na binary format. The format is specific to Python, but independent of\nmachine architecture issues.\n\nNot all Python object types are supported; in general, only objects\nwhose value is independent from a particular invocation of Python can be\nwritten and read by this module. The following types are supported:\nNone, integers, long integers, floating point numbers, strings, Unicode\nobjects, tuples, lists, sets, dictionaries, and code objects, where it\nshould be understood that tuples, lists and dictionaries are only\nsupported as long as the values contained therein are themselves\nsupported; and recursive lists and dictionaries should not be written\n(they will cause infinite loops).\n\nVariables:\n\nversion -- indicates the format that the module uses. Version 0 is the\n    historical format, version 1 (added in Python 2.4) shares interned\n    strings and version 2 (added in Python 2.5) uses a binary format for\n    floating point numbers. (New in version 2.4)\n\nFunctions:\n\ndump() -- write value to a file\nload() -- read value from a file\ndumps() -- write value to a string\nloads() -- read value from a string"}}, {"pk": 466, "model": "website.keyword", "fields": {"category": 3, "codname": "anydbm", "slug": "anydbm", "description": "Generic interface to all dbm clones.\n\nInstead of\n\n        import dbm\n        d = dbm.open(file, 'w', 0666)\n\nuse\n\n        import anydbm\n        d = anydbm.open(file, 'w')\n\nThe returned object is a dbhash, gdbm, dbm or dumbdbm object,\ndependent on the type of database being opened (determined by whichdb\nmodule) in the case of an existing dbm. If the dbm does not exist and\nthe create or new flag ('c' or 'n') was specified, the dbm type will\nbe determined by the availability of the modules (tested in the above\norder).\n\nIt has the following interface (key and data are strings):\n\n        d[key] = data   # store data at key (may override data at\n                        # existing key)\n        data = d[key]   # retrieve data at key (raise KeyError if no\n                        # such key)\n        del d[key]      # delete data stored at key (raises KeyError\n                        # if no such key)\n        flag = key in d   # true if the key exists\n        list = d.keys() # return a list of all existing keys (slow!)\n\nFuture versions may change the order in which implementations are\ntested for existence, and add interfaces to other dbm-like\nimplementations.\n"}}, {"pk": 467, "model": "website.keyword", "fields": {"category": 3, "codname": "whichdb", "slug": "whichdb", "description": "Guess which db package to use to open a db file."}}, {"pk": 468, "model": "website.keyword", "fields": {"category": 3, "codname": "dbm", "slug": "dbm", "description": ""}}, {"pk": 469, "model": "website.keyword", "fields": {"category": 3, "codname": "dbhash", "slug": "dbhash", "description": "Provide a (g)dbm-compatible interface to bsddb.hashopen."}}, {"pk": 470, "model": "website.keyword", "fields": {"category": 3, "codname": "bsddb", "slug": "bsddb", "description": "Support for Berkeley DB 4.3 through 5.3 with a simple interface.\n\nFor the full featured object oriented interface use the bsddb.db module\ninstead.  It mirrors the Oracle Berkeley DB C API.\n"}}, {"pk": 471, "model": "website.keyword", "fields": {"category": 3, "codname": "dumbdbm", "slug": "dumbdbm", "description": "A dumb and slow but simple dbm clone.\n\nFor database spam, spam.dir contains the index (a text file),\nspam.bak *may* contain a backup of the index (also a text file),\nwhile spam.dat contains the data (a binary file).\n\nXXX TO DO:\n\n- seems to contain a bug when updating...\n\n- reclaim free space (currently, space once occupied by deleted or expanded\nitems is never reused)\n\n- support concurrent access (currently, if two processes take turns making\nupdates, they can mess up the index)\n\n- support efficient access to large databases (currently, the whole index\nis read when the database is opened, and some updates rewrite the whole index)\n\n- support opening for read-only (flag = 'm')\n\n"}}, {"pk": 472, "model": "website.keyword", "fields": {"category": 3, "codname": "sqlite3", "slug": "sqlite3", "description": ""}}, {"pk": 473, "model": "website.keyword", "fields": {"category": 3, "codname": "zlib", "slug": "zlib", "description": "The functions in this module allow compression and decompression using the\nzlib library, which is based on GNU zip.\n\nadler32(string[, start]) -- Compute an Adler-32 checksum.\ncompress(string[, level]) -- Compress string, with compression level in 0-9.\ncompressobj([level]) -- Return a compressor object.\ncrc32(string[, start]) -- Compute a CRC-32 checksum.\ndecompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.\ndecompressobj([wbits]) -- Return a decompressor object.\n\n'wbits' is window buffer size.\nCompressor objects support compress() and flush() methods; decompressor\nobjects support decompress() and flush()."}}, {"pk": 474, "model": "website.keyword", "fields": {"category": 3, "codname": "gzip", "slug": "gzip", "description": "Functions that read and write gzipped files.\n\nThe user of the file doesn't have to worry about the compression,\nbut random access is not allowed."}}, {"pk": 475, "model": "website.keyword", "fields": {"category": 3, "codname": "bz2", "slug": "bz2", "description": "The python bz2 module provides a comprehensive interface for\nthe bz2 compression library. It implements a complete file\ninterface, one shot (de)compression functions, and types for\nsequential (de)compression.\n"}}, {"pk": 476, "model": "website.keyword", "fields": {"category": 3, "codname": "zipfile", "slug": "zipfile", "description": "\nRead and write ZIP files.\n"}}, {"pk": 477, "model": "website.keyword", "fields": {"category": 3, "codname": "tarfile", "slug": "tarfile", "description": "Read from and write to tar format archives.\n"}}, {"pk": 478, "model": "website.keyword", "fields": {"category": 3, "codname": "csv", "slug": "csv", "description": "CSV parsing and writing.\n\nThis module provides classes that assist in the reading and writing\nof Comma Separated Value (CSV) files, and implements the interface\ndescribed by PEP 305.  Although many CSV files are simple to parse,\nthe format is not formally defined by a stable specification and\nis subtle enough that parsing lines of a CSV file with something\nlike line.split(\",\") is bound to fail.  The module supports three\nbasic APIs: reading, writing, and registration of dialects.\n\n\nDIALECT REGISTRATION:\n\nReaders and writers support a dialect argument, which is a convenient\nhandle on a group of settings.  When the dialect argument is a string,\nit identifies one of the dialects previously registered with the module.\nIf it is a class or instance, the attributes of the argument are used as\nthe settings for the reader or writer:\n\n    class excel:\n        delimiter = ','\n        quotechar = '\"'\n        escapechar = None\n        doublequote = True\n        skipinitialspace = False\n        lineterminator = '\\r\\n'\n        quoting = QUOTE_MINIMAL\n\nSETTINGS:\n\n    * quotechar - specifies a one-character string to use as the \n        quoting character.  It defaults to '\"'.\n    * delimiter - specifies a one-character string to use as the \n        field separator.  It defaults to ','.\n    * skipinitialspace - specifies how to interpret whitespace which\n        immediately follows a delimiter.  It defaults to False, which\n        means that whitespace immediately following a delimiter is part\n        of the following field.\n    * lineterminator -  specifies the character sequence which should \n        terminate rows.\n    * quoting - controls when quotes should be generated by the writer.\n        It can take on any of the following module constants:\n\n        csv.QUOTE_MINIMAL means only when required, for example, when a\n            field contains either the quotechar or the delimiter\n        csv.QUOTE_ALL means that quotes are always placed around fields.\n        csv.QUOTE_NONNUMERIC means that quotes are always placed around\n            fields which do not parse as integers or floating point\n            numbers.\n        csv.QUOTE_NONE means that quotes are never placed around fields.\n    * escapechar - specifies a one-character string used to escape \n        the delimiter when quoting is set to QUOTE_NONE.\n    * doublequote - controls the handling of quotes inside fields.  When\n        True, two consecutive quotes are interpreted as one during read,\n        and when writing, each quote character embedded in the data is\n        written as two quotes\n"}}, {"pk": 479, "model": "website.keyword", "fields": {"category": 3, "codname": "robotparser", "slug": "robotparser", "description": " robotparser.py\n\n    Copyright (C) 2000  Bastian Kleineidam\n\n    You can choose between two licenses when using this package:\n    1) GNU GPLv2\n    2) PSF license for Python 2.2\n\n    The robots.txt Exclusion Protocol is implemented as specified in\n    http://info.webcrawler.com/mak/projects/robots/norobots-rfc.html\n"}}, {"pk": 480, "model": "website.keyword", "fields": {"category": 3, "codname": "netrc", "slug": "netrc", "description": "An object-oriented interface to .netrc files."}}, {"pk": 481, "model": "website.keyword", "fields": {"category": 3, "codname": "xdrlib", "slug": "xdrlib", "description": "Implements (a subset of) Sun XDR -- eXternal Data Representation.\n\nSee: RFC 1014\n\n"}}, {"pk": 482, "model": "website.keyword", "fields": {"category": 3, "codname": "plistlib", "slug": "plistlib", "description": "plistlib.py -- a tool to generate and parse MacOSX .plist files.\n\nThe PropertyList (.plist) file format is a simple XML pickle supporting\nbasic object types, like dictionaries, lists, numbers and strings.\nUsually the top level object is a dictionary.\n\nTo write out a plist file, use the writePlist(rootObject, pathOrFile)\nfunction. 'rootObject' is the top level object, 'pathOrFile' is a\nfilename or a (writable) file object.\n\nTo parse a plist from a file, use the readPlist(pathOrFile) function,\nwith a file name or a (readable) file object as the only argument. It\nreturns the top level object (again, usually a dictionary).\n\nTo work with plist data in strings, you can use readPlistFromString()\nand writePlistToString().\n\nValues can be strings, integers, floats, booleans, tuples, lists,\ndictionaries, Data or datetime.datetime objects. String values (including\ndictionary keys) may be unicode strings -- they will be written out as\nUTF-8.\n\nThe <data> plist type is supported through the Data class. This is a\nthin wrapper around a Python string.\n\nGenerate Plist example:\n\n    pl = dict(\n        aString=\"Doodah\",\n        aList=[\"A\", \"B\", 12, 32.1, [1, 2, 3]],\n        aFloat=0.1,\n        anInt=728,\n        aDict=dict(\n            anotherString=\"<hello & hi there!>\",\n            aUnicodeValue=u'M\\xe4ssig, Ma\\xdf',\n            aTrueValue=True,\n            aFalseValue=False,\n        ),\n        someData=Data(\"<binary gunk>\"),\n        someMoreData=Data(\"<lots of binary gunk>\" * 10),\n        aDate=datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),\n    )\n    # unicode keys are possible, but a little awkward to use:\n    pl[u'\\xc5benraa'] = \"That was a unicode key.\"\n    writePlist(pl, fileName)\n\nParse Plist example:\n\n    pl = readPlist(pathOrFile)\n    print pl[\"aKey\"]\n"}}, {"pk": 483, "model": "website.keyword", "fields": {"category": 3, "codname": "hashlib", "slug": "hashlib", "description": "hashlib module - A common interface to many hash functions.\n\nnew(name, string='') - returns a new hash object implementing the\n                       given hash function; initializing the hash\n                       using the given string data.\n\nNamed constructor functions are also available, these are much faster\nthan using new():\n\nmd5(), sha1(), sha224(), sha256(), sha384(), and sha512()\n\nMore algorithms may be available on your platform but the above are\nguaranteed to exist.\n\nNOTE: If you want the adler32 or crc32 hash functions they are available in\nthe zlib module.\n\nChoose your hash function wisely.  Some have known collision weaknesses.\nsha384 and sha512 will be slow on 32 bit platforms.\n\nHash objects have these methods:\n - update(arg): Update the hash object with the string arg. Repeated calls\n                are equivalent to a single call with the concatenation of all\n                the arguments.\n - digest():    Return the digest of the strings passed to the update() method\n                so far. This may contain non-ASCII characters, including\n                NUL bytes.\n - hexdigest(): Like digest() except the digest is returned as a string of\n                double length, containing only hexadecimal digits.\n - copy():      Return a copy (clone) of the hash object. This can be used to\n                efficiently compute the digests of strings that share a common\n                initial substring.\n\nFor example, to obtain the digest of the string 'Nobody inspects the\nspammish repetition':\n\n    >>> import hashlib\n    >>> m = hashlib.md5()\n    >>> m.update(\"Nobody inspects\")\n    >>> m.update(\" the spammish repetition\")\n    >>> m.digest()\n    '\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9'\n\nMore condensed:\n\n    >>> hashlib.sha224(\"Nobody inspects the spammish repetition\").hexdigest()\n    'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'\n\n"}}, {"pk": 484, "model": "website.keyword", "fields": {"category": 3, "codname": "hmac", "slug": "hmac", "description": "HMAC (Keyed-Hashing for Message Authentication) Python module.\n\nImplements the HMAC algorithm as described by RFC 2104.\n"}}, {"pk": 485, "model": "website.keyword", "fields": {"category": 3, "codname": "md5", "slug": "md5", "description": ""}}, {"pk": 486, "model": "website.keyword", "fields": {"category": 3, "codname": "sha", "slug": "sha", "description": ""}}, {"pk": 487, "model": "website.keyword", "fields": {"category": 3, "codname": "os", "slug": "os", "description": "OS routines for Mac, NT, or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.\n  - os.path is one of the modules posixpath, or ntpath\n  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'\n  - os.curdir is a string representing the current directory ('.' or ':')\n  - os.pardir is a string representing the parent directory ('..' or '::')\n  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')\n  - os.extsep is the extension separator ('.' or '/')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n"}}, {"pk": 488, "model": "website.keyword", "fields": {"category": 3, "codname": "io", "slug": "io", "description": "The io module provides the Python interfaces to stream handling. The\nbuiltin open function is defined in this module.\n\nAt the top of the I/O hierarchy is the abstract base class IOBase. It\ndefines the basic interface to a stream. Note, however, that there is no\nseparation between reading and writing to streams; implementations are\nallowed to raise an IOError if they do not support a given operation.\n\nExtending IOBase is RawIOBase which deals simply with the reading and\nwriting of raw bytes to a stream. FileIO subclasses RawIOBase to provide\nan interface to OS files.\n\nBufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\nsubclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\nstreams that are readable, writable, and both respectively.\nBufferedRandom provides a buffered interface to random access\nstreams. BytesIO is a simple stream of in-memory bytes.\n\nAnother IOBase subclass, TextIOBase, deals with the encoding and decoding\nof streams into text. TextIOWrapper, which extends it, is a buffered text\ninterface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\nis a in-memory stream for text.\n\nArgument names are not part of the specification, and only the arguments\nof open() are intended to be used as keyword arguments.\n\ndata:\n\nDEFAULT_BUFFER_SIZE\n\n   An int containing the default buffer size used by the module's buffered\n   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\n   possible.\n"}}, {"pk": 489, "model": "website.keyword", "fields": {"category": 3, "codname": "time", "slug": "time", "description": "This module provides various functions to manipulate time values.\n\nThere are two standard representations of time.  One is the number\nof seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\nor a floating point number (to represent fractions of seconds).\nThe Epoch is system-defined; on Unix, it is generally January 1st, 1970.\nThe actual value can be retrieved by calling gmtime(0).\n\nThe other representation is a tuple of 9 integers giving local time.\nThe tuple items are:\n  year (four digits, e.g. 1998)\n  month (1-12)\n  day (1-31)\n  hours (0-23)\n  minutes (0-59)\n  seconds (0-59)\n  weekday (0-6, Monday is 0)\n  Julian day (day in the year, 1-366)\n  DST (Daylight Savings Time) flag (-1, 0 or 1)\nIf the DST flag is 0, the time is given in the regular time zone;\nif it is 1, the time is given in the DST time zone;\nif it is -1, mktime() should guess based on the date and time.\n\nVariables:\n\ntimezone -- difference in seconds between UTC and local standard time\naltzone -- difference in  seconds between UTC and local DST time\ndaylight -- whether local time should reflect DST\ntzname -- tuple of (standard time zone name, DST time zone name)\n\nFunctions:\n\ntime() -- return current time in seconds since the Epoch as a float\nclock() -- return CPU time since process start as a float\nsleep() -- delay for a number of seconds given as a float\ngmtime() -- convert seconds since Epoch to UTC tuple\nlocaltime() -- convert seconds since Epoch to local time tuple\nasctime() -- convert time tuple to string\nctime() -- convert time in seconds to string\nmktime() -- convert local time tuple to seconds since Epoch\nstrftime() -- convert time tuple to string according to format specification\nstrptime() -- parse string to time tuple according to format specification\ntzset() -- change the local timezone"}}, {"pk": 490, "model": "website.keyword", "fields": {"category": 3, "codname": "argparse", "slug": "argparse", "description": "Command-line parsing library\n\nThis module is an optparse-inspired command-line parsing library that:\n\n    - handles both optional and positional arguments\n    - produces highly informative usage messages\n    - supports parsers that dispatch to sub-parsers\n\nThe following is a simple usage example that sums integers from the\ncommand-line and writes the result to a file::\n\n    parser = argparse.ArgumentParser(\n        description='sum the integers at the command line')\n    parser.add_argument(\n        'integers', metavar='int', nargs='+', type=int,\n        help='an integer to be summed')\n    parser.add_argument(\n        '--log', default=sys.stdout, type=argparse.FileType('w'),\n        help='the file where the sum should be written')\n    args = parser.parse_args()\n    args.log.write('%s' % sum(args.integers))\n    args.log.close()\n\nThe module contains the following public classes:\n\n    - ArgumentParser -- The main entry point for command-line parsing. As the\n        example above shows, the add_argument() method is used to populate\n        the parser with actions for optional and positional arguments. Then\n        the parse_args() method is invoked to convert the args at the\n        command-line into an object with attributes.\n\n    - ArgumentError -- The exception raised by ArgumentParser objects when\n        there are errors with the parser's actions. Errors raised while\n        parsing the command-line are caught by ArgumentParser and emitted\n        as command-line messages.\n\n    - FileType -- A factory for defining types of files to be created. As the\n        example above shows, instances of FileType are typically passed as\n        the type= argument of add_argument() calls.\n\n    - Action -- The base class for parser actions. Typically actions are\n        selected by passing strings like 'store_true' or 'append_const' to\n        the action= argument of add_argument(). However, for greater\n        customization of ArgumentParser actions, subclasses of Action may\n        be defined and passed as the action= argument.\n\n    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,\n        ArgumentDefaultsHelpFormatter -- Formatter classes which\n        may be passed as the formatter_class= argument to the\n        ArgumentParser constructor. HelpFormatter is the default,\n        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser\n        not to change the formatting for help text, and\n        ArgumentDefaultsHelpFormatter adds information about argument defaults\n        to the help.\n\nAll other classes in this module are considered implementation details.\n(Also note that HelpFormatter and RawDescriptionHelpFormatter are only\nconsidered public as object names -- the API of the formatter objects is\nstill considered an implementation detail.)\n"}}, {"pk": 491, "model": "website.keyword", "fields": {"category": 3, "codname": "optparse", "slug": "optparse", "description": "A powerful, extensible, and easy-to-use option parser.\n\nBy Greg Ward <gward@python.net>\n\nOriginally distributed as Optik.\n\nFor support, use the optik-users@lists.sourceforge.net mailing list\n(http://lists.sourceforge.net/lists/listinfo/optik-users).\n\nSimple usage example:\n\n   from optparse import OptionParser\n\n   parser = OptionParser()\n   parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                     help=\"write report to FILE\", metavar=\"FILE\")\n   parser.add_option(\"-q\", \"--quiet\",\n                     action=\"store_false\", dest=\"verbose\", default=True,\n                     help=\"don't print status messages to stdout\")\n\n   (options, args) = parser.parse_args()\n"}}, {"pk": 492, "model": "website.keyword", "fields": {"category": 3, "codname": "getopt", "slug": "getopt", "description": "Parser for command line options.\n\nThis module helps scripts to parse the command line arguments in\nsys.argv.  It supports the same conventions as the Unix getopt()\nfunction (including the special meanings of arguments of the form `-'\nand `--').  Long options similar to those supported by GNU software\nmay be used as well via an optional third argument.  This module\nprovides two functions and an exception:\n\ngetopt() -- Parse command line options\ngnu_getopt() -- Like getopt(), but allow option and non-option arguments\nto be intermixed.\nGetoptError -- exception (class) raised with 'opt' attribute, which is the\noption involved with the exception.\n"}}, {"pk": 493, "model": "website.keyword", "fields": {"category": 3, "codname": "logging", "slug": "logging", "description": "\nLogging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python.\n\nCopyright (C) 2001-2012 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!\n"}}, {"pk": 494, "model": "website.keyword", "fields": {"category": 3, "codname": "getpass", "slug": "getpass", "description": "Utilities to get a password and/or the current user name.\n\ngetpass(prompt[, stream]) - Prompt for a password, with echo turned off.\ngetuser() - Get the user name from the environment or password database.\n\nGetPassWarning - This UserWarning is issued when getpass() cannot prevent\n                 echoing of the password contents while reading.\n\nOn Windows, the msvcrt module will be used.\nOn the Mac EasyDialogs.AskPassword is used, if available.\n\n"}}, {"pk": 495, "model": "website.keyword", "fields": {"category": 3, "codname": "curses", "slug": "curses", "description": "curses\n\nThe main package for curses support for Python.  Normally used by importing\nthe package, and perhaps a particular module inside it.\n\n   import curses\n   from curses import textpad\n   curses.initscr()\n   ...\n\n"}}, {"pk": 496, "model": "website.keyword", "fields": {"category": 3, "codname": "platform", "slug": "platform", "description": " This module tries to retrieve as much platform-identifying data as\n    possible. It makes this information available via function APIs.\n\n    If called from the command line, it prints the platform\n    information concatenated as single string to stdout. The output\n    format is useable as part of a filename.\n\n"}}, {"pk": 497, "model": "website.keyword", "fields": {"category": 3, "codname": "errno", "slug": "errno", "description": "This module makes available standard errno system symbols.\n\nThe value of each symbol is the corresponding integer value,\ne.g., on most systems, errno.ENOENT equals the integer 2.\n\nThe dictionary errno.errorcode maps numeric codes to symbol names,\ne.g., errno.errorcode[2] could be the string 'ENOENT'.\n\nSymbols that are not relevant to the underlying system are not defined.\n\nTo map error codes to error messages, use the function os.strerror(),\ne.g. os.strerror(2) could return 'No such file or directory'."}}, {"pk": 498, "model": "website.keyword", "fields": {"category": 3, "codname": "ctypes", "slug": "ctypes", "description": "create and manipulate C data types in Python"}}, {"pk": 499, "model": "website.keyword", "fields": {"category": 3, "codname": "select", "slug": "select", "description": "This module supports asynchronous I/O on multiple file descriptors.\n\n*** IMPORTANT NOTICE ***\nOn Windows and OpenVMS, only sockets are supported; on Unix, all file descriptors."}}, {"pk": 500, "model": "website.keyword", "fields": {"category": 3, "codname": "threading", "slug": "threading", "description": "Thread module emulating a subset of Java's threading model."}}, {"pk": 501, "model": "website.keyword", "fields": {"category": 3, "codname": "thread", "slug": "thread", "description": "This module provides primitive operations to write multi-threaded programs.\nThe 'threading' module provides a more convenient interface."}}, {"pk": 502, "model": "website.keyword", "fields": {"category": 3, "codname": "dummy_threading", "slug": "dummy_threading", "description": "Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.\n\nThe module ``_dummy_threading`` is added to ``sys.modules`` in order\nto not have ``threading`` considered imported.  Had ``threading`` been\ndirectly imported it would have made all subsequent imports succeed\nregardless of whether ``thread`` was available which is not desired.\n\n"}}, {"pk": 503, "model": "website.keyword", "fields": {"category": 3, "codname": "dummy_thread", "slug": "dummy_thread", "description": "Drop-in replacement for the thread module.\n\nMeant to be used as a brain-dead substitute so that threaded code does\nnot need to be rewritten for when the thread module is not present.\n\nSuggested usage is::\n\n    try:\n        import thread\n    except ImportError:\n        import dummy_thread as thread\n\n"}}, {"pk": 504, "model": "website.keyword", "fields": {"category": 3, "codname": "multiprocessing", "slug": "multiprocessing", "description": ""}}, {"pk": 505, "model": "website.keyword", "fields": {"category": 3, "codname": "mmap", "slug": "mmap", "description": ""}}, {"pk": 506, "model": "website.keyword", "fields": {"category": 3, "codname": "readline", "slug": "readline", "description": " Imports and provides the 'correct' version of readline for the platform.\n\nReadline is used throughout IPython as::\n\n    import IPython.utils.rlineimpl as readline\n\nIn addition to normal readline stuff, this module provides have_readline\nboolean and _outputfile variable used in IPython.utils.\n"}}, {"pk": 507, "model": "website.keyword", "fields": {"category": 3, "codname": "rlcompleter", "slug": "rlcompleter", "description": "Word completion for GNU readline.\n\nThe completer completes keywords, built-ins and globals in a selectable\nnamespace (which defaults to __main__); when completing NAME.NAME..., it\nevaluates (!) the expression up to the last dot and completes its attributes.\n\nIt's very cool to do \"import sys\" type \"sys.\", hit the completion key (twice),\nand see the list of names defined by the sys module!\n\nTip: to use the tab key as the completion key, call\n\n    readline.parse_and_bind(\"tab: complete\")\n\nNotes:\n\n- Exceptions raised by the completer function are *ignored* (and generally cause\n  the completion to fail).  This is a feature -- since readline sets the tty\n  device in raw (or cbreak) mode, printing a traceback wouldn't work well\n  without some complicated hoopla to save, reset and restore the tty state.\n\n- The evaluation of the NAME.NAME... form may cause arbitrary application\n  defined code to be executed if an object with a __getattr__ hook is found.\n  Since it is the responsibility of the application (or the user) to enable this\n  feature, I consider this an acceptable risk.  More complicated expressions\n  (e.g. function calls or indexing operations) are *not* evaluated.\n\n- GNU readline is also used by the built-in functions input() and\nraw_input(), and thus these also benefit/suffer from the completer\nfeatures.  Clearly an interactive application can benefit by\nspecifying its own completer function and using raw_input() for all\nits input.\n\n- When the original stdin is not a tty device, GNU readline is never\n  used, and this module (and the readline module) are silently inactive.\n\n"}}, {"pk": 508, "model": "website.keyword", "fields": {"category": 3, "codname": "subprocess", "slug": "subprocess", "description": "subprocess - Subprocesses with accessible I/O streams\n\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.  This module\nintends to replace several other, older modules and functions, like:\n\nos.system\nos.spawn*\nos.popen*\npopen2.*\ncommands.*\n\nInformation about how the subprocess module can be used to replace these\nmodules and functions can be found below.\n\n\n\nUsing the subprocess module\n===========================\nThis module defines one class called Popen:\n\nclass Popen(args, bufsize=0, executable=None,\n            stdin=None, stdout=None, stderr=None,\n            preexec_fn=None, close_fds=False, shell=False,\n            cwd=None, env=None, universal_newlines=False,\n            startupinfo=None, creationflags=0):\n\n\nArguments are:\n\nargs should be a string, or a sequence of program arguments.  The\nprogram to execute is normally the first item in the args sequence or\nstring, but can be explicitly set by using the executable argument.\n\nOn UNIX, with shell=False (default): In this case, the Popen class\nuses os.execvp() to execute the child program.  args should normally\nbe a sequence.  A string will be treated as a sequence with the string\nas the only item (the program to execute).\n\nOn UNIX, with shell=True: If args is a string, it specifies the\ncommand string to execute through the shell.  If args is a sequence,\nthe first item specifies the command string, and any additional items\nwill be treated as additional shell arguments.\n\nOn Windows: the Popen class uses CreateProcess() to execute the child\nprogram, which operates on strings.  If args is a sequence, it will be\nconverted to a string using the list2cmdline method.  Please note that\nnot all MS Windows applications interpret the command line the same\nway: The list2cmdline is designed for applications using the same\nrules as the MS C runtime.\n\nbufsize, if given, has the same meaning as the corresponding argument\nto the built-in open() function: 0 means unbuffered, 1 means line\nbuffered, any other positive value means use a buffer of\n(approximately) that size.  A negative bufsize means to use the system\ndefault, which usually means fully buffered.  The default value for\nbufsize is 0 (unbuffered).\n\nstdin, stdout and stderr specify the executed programs' standard\ninput, standard output and standard error file handles, respectively.\nValid values are PIPE, an existing file descriptor (a positive\ninteger), an existing file object, and None.  PIPE indicates that a\nnew pipe to the child should be created.  With None, no redirection\nwill occur; the child's file handles will be inherited from the\nparent.  Additionally, stderr can be STDOUT, which indicates that the\nstderr data from the applications should be captured into the same\nfile handle as for stdout.\n\nIf preexec_fn is set to a callable object, this object will be called\nin the child process just before the child is executed.\n\nIf close_fds is true, all file descriptors except 0, 1 and 2 will be\nclosed before the child process is executed.\n\nif shell is true, the specified command will be executed through the\nshell.\n\nIf cwd is not None, the current directory will be changed to cwd\nbefore the child is executed.\n\nIf env is not None, it defines the environment variables for the new\nprocess.\n\nIf universal_newlines is true, the file objects stdout and stderr are\nopened as a text files, but lines may be terminated by any of '\\n',\nthe Unix end-of-line convention, '\\r', the Macintosh convention or\n'\\r\\n', the Windows convention.  All of these external representations\nare seen as '\\n' by the Python program.  Note: This feature is only\navailable if Python is built with universal newline support (the\ndefault).  Also, the newlines attribute of the file objects stdout,\nstdin and stderr are not updated by the communicate() method.\n\nThe startupinfo and creationflags, if given, will be passed to the\nunderlying CreateProcess() function.  They can specify things such as\nappearance of the main window and priority for the new process.\n(Windows only)\n\n\nThis module also defines some shortcut functions:\n\ncall(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call([\"ls\", \"-l\"])\n\ncheck_call(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete.  If the\n    exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    check_call([\"ls\", \"-l\"])\n\ncheck_output(*popenargs, **kwargs):\n    Run command with arguments and return its output as a byte string.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    output = check_output([\"ls\", \"-l\", \"/dev/null\"])\n\n\nExceptions\n----------\nExceptions raised in the child process, before the new program has\nstarted to execute, will be re-raised in the parent.  Additionally,\nthe exception object will have one extra attribute called\n'child_traceback', which is a string containing traceback information\nfrom the childs point of view.\n\nThe most common exception raised is OSError.  This occurs, for\nexample, when trying to execute a non-existent file.  Applications\nshould prepare for OSErrors.\n\nA ValueError will be raised if Popen is called with invalid arguments.\n\ncheck_call() and check_output() will raise CalledProcessError, if the\ncalled process returns a non-zero return code.\n\n\nSecurity\n--------\nUnlike some other popen functions, this implementation will never call\n/bin/sh implicitly.  This means that all characters, including shell\nmetacharacters, can safely be passed to child processes.\n\n\nPopen objects\n=============\nInstances of the Popen class have the following methods:\n\npoll()\n    Check if child process has terminated.  Returns returncode\n    attribute.\n\nwait()\n    Wait for child process to terminate.  Returns returncode attribute.\n\ncommunicate(input=None)\n    Interact with process: Send data to stdin.  Read data from stdout\n    and stderr, until end-of-file is reached.  Wait for process to\n    terminate.  The optional input argument should be a string to be\n    sent to the child process, or None, if no data should be sent to\n    the child.\n\n    communicate() returns a tuple (stdout, stderr).\n\n    Note: The data read is buffered in memory, so do not use this\n    method if the data size is large or unlimited.\n\nThe following attributes are also available:\n\nstdin\n    If the stdin argument is PIPE, this attribute is a file object\n    that provides input to the child process.  Otherwise, it is None.\n\nstdout\n    If the stdout argument is PIPE, this attribute is a file object\n    that provides output from the child process.  Otherwise, it is\n    None.\n\nstderr\n    If the stderr argument is PIPE, this attribute is file object that\n    provides error output from the child process.  Otherwise, it is\n    None.\n\npid\n    The process ID of the child process.\n\nreturncode\n    The child return code.  A None value indicates that the process\n    hasn't terminated yet.  A negative value -N indicates that the\n    child was terminated by signal N (UNIX only).\n\n\nReplacing older functions with the subprocess module\n====================================================\nIn this section, \"a ==> b\" means that b can be used as a replacement\nfor a.\n\nNote: All functions in this section fail (more or less) silently if\nthe executed program cannot be found; this module raises an OSError\nexception.\n\nIn the following examples, we assume that the subprocess module is\nimported with \"from subprocess import *\".\n\n\nReplacing /bin/sh shell backquote\n---------------------------------\noutput=`mycmd myarg`\n==>\noutput = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]\n\n\nReplacing shell pipe line\n-------------------------\noutput=`dmesg | grep hda`\n==>\np1 = Popen([\"dmesg\"], stdout=PIPE)\np2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\noutput = p2.communicate()[0]\n\n\nReplacing os.system()\n---------------------\nsts = os.system(\"mycmd\" + \" myarg\")\n==>\np = Popen(\"mycmd\" + \" myarg\", shell=True)\npid, sts = os.waitpid(p.pid, 0)\n\nNote:\n\n* Calling the program through the shell is usually not required.\n\n* It's easier to look at the returncode attribute than the\n  exitstatus.\n\nA more real-world example would look like this:\n\ntry:\n    retcode = call(\"mycmd\" + \" myarg\", shell=True)\n    if retcode < 0:\n        print >>sys.stderr, \"Child was terminated by signal\", -retcode\n    else:\n        print >>sys.stderr, \"Child returned\", retcode\nexcept OSError, e:\n    print >>sys.stderr, \"Execution failed:\", e\n\n\nReplacing os.spawn*\n-------------------\nP_NOWAIT example:\n\npid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n==>\npid = Popen([\"/bin/mycmd\", \"myarg\"]).pid\n\n\nP_WAIT example:\n\nretcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n==>\nretcode = call([\"/bin/mycmd\", \"myarg\"])\n\n\nVector example:\n\nos.spawnvp(os.P_NOWAIT, path, args)\n==>\nPopen([path] + args[1:])\n\n\nEnvironment example:\n\nos.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\n==>\nPopen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})\n\n\nReplacing os.popen*\n-------------------\npipe = os.popen(\"cmd\", mode='r', bufsize)\n==>\npipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout\n\npipe = os.popen(\"cmd\", mode='w', bufsize)\n==>\npipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin\n\n\n(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)\n==>\np = Popen(\"cmd\", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdin, child_stdout) = (p.stdin, p.stdout)\n\n\n(child_stdin,\n child_stdout,\n child_stderr) = os.popen3(\"cmd\", mode, bufsize)\n==>\np = Popen(\"cmd\", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n(child_stdin,\n child_stdout,\n child_stderr) = (p.stdin, p.stdout, p.stderr)\n\n\n(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,\n                                                   bufsize)\n==>\np = Popen(\"cmd\", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)\n(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)\n\nOn Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as\nthe command to execute, in which case arguments will be passed\ndirectly to the program without shell intervention.  This usage can be\nreplaced as follows:\n\n(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,\n                                        bufsize)\n==>\np = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)\n(child_stdin, child_stdout) = (p.stdin, p.stdout)\n\nReturn code handling translates as follows:\n\npipe = os.popen(\"cmd\", 'w')\n...\nrc = pipe.close()\nif rc is not None and rc % 256:\n    print \"There were some errors\"\n==>\nprocess = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)\n...\nprocess.stdin.close()\nif process.wait() != 0:\n    print \"There were some errors\"\n\n\nReplacing popen2.*\n------------------\n(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)\n==>\np = Popen([\"somestring\"], shell=True, bufsize=bufsize\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdout, child_stdin) = (p.stdout, p.stdin)\n\nOn Unix, popen2 also accepts a sequence as the command to execute, in\nwhich case arguments will be passed directly to the program without\nshell intervention.  This usage can be replaced as follows:\n\n(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,\n                                            mode)\n==>\np = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdout, child_stdin) = (p.stdout, p.stdin)\n\nThe popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,\nexcept that:\n\n* subprocess.Popen raises an exception if the execution fails\n* the capturestderr argument is replaced with the stderr argument.\n* stdin=PIPE and stdout=PIPE must be specified.\n* popen2 closes all filedescriptors by default, but you have to specify\n  close_fds=True with subprocess.Popen.\n"}}, {"pk": 509, "model": "website.keyword", "fields": {"category": 3, "codname": "socket", "slug": "socket", "description": "This module provides socket operations and some related functions.\nOn Unix, it supports IP (Internet Protocol) and Unix domain sockets.\nOn other systems, it only supports IP. Functions specific for a\nsocket are available as methods of the socket object.\n\nFunctions:\n\nsocket() -- create a new socket object\nsocketpair() -- create a pair of new socket objects [*]\nfromfd() -- create a socket object from an open file descriptor [*]\ngethostname() -- return the current hostname\ngethostbyname() -- map a hostname to its IP number\ngethostbyaddr() -- map an IP number or hostname to DNS info\ngetservbyname() -- map a service name and a protocol name to a port number\ngetprotobyname() -- map a protocol name (e.g. 'tcp') to a number\nntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order\nhtons(), htonl() -- convert 16, 32 bit int from host to network byte order\ninet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format\ninet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)\nssl() -- secure socket layer support (only available if configured)\nsocket.getdefaulttimeout() -- get the default timeout value\nsocket.setdefaulttimeout() -- set the default timeout value\ncreate_connection() -- connects to an address, with an optional timeout and\n                       optional source address.\n\n [*] not available on all platforms!\n\nSpecial objects:\n\nSocketType -- type object for socket objects\nerror -- exception raised for I/O errors\nhas_ipv6 -- boolean value indicating if IPv6 is supported\n\nInteger constants:\n\nAF_INET, AF_UNIX -- socket domains (first argument to socket() call)\nSOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)\n\nMany other constants may be defined; these may be used in calls to\nthe setsockopt() and getsockopt() methods.\n"}}, {"pk": 510, "model": "website.keyword", "fields": {"category": 3, "codname": "ssl", "slug": "ssl", "description": "This module provides some more Pythonic support for SSL.\n\nObject types:\n\n  SSLSocket -- subtype of socket.socket which does SSL over the socket\n\nExceptions:\n\n  SSLError -- exception raised for I/O errors\n\nFunctions:\n\n  cert_time_to_seconds -- convert time string used for certificate\n                          notBefore and notAfter functions to integer\n                          seconds past the Epoch (the time values\n                          returned from time.time())\n\n  fetch_server_certificate (HOST, PORT) -- fetch the certificate provided\n                          by the server running on HOST at port PORT.  No\n                          validation of the certificate is performed.\n\nInteger constants:\n\nSSL_ERROR_ZERO_RETURN\nSSL_ERROR_WANT_READ\nSSL_ERROR_WANT_WRITE\nSSL_ERROR_WANT_X509_LOOKUP\nSSL_ERROR_SYSCALL\nSSL_ERROR_SSL\nSSL_ERROR_WANT_CONNECT\n\nSSL_ERROR_EOF\nSSL_ERROR_INVALID_ERROR_CODE\n\nThe following group define certificate requirements that one side is\nallowing/requiring from the other side:\n\nCERT_NONE - no certificates from the other side are required (or will\n            be looked at if provided)\nCERT_OPTIONAL - certificates are not required, but if provided will be\n                validated, and if validation fails, the connection will\n                also fail\nCERT_REQUIRED - certificates are required, and will be validated, and\n                if validation fails, the connection will also fail\n\nThe following constants identify various SSL protocol variants:\n\nPROTOCOL_SSLv2\nPROTOCOL_SSLv3\nPROTOCOL_SSLv23\nPROTOCOL_TLSv1\n"}}, {"pk": 511, "model": "website.keyword", "fields": {"category": 3, "codname": "signal", "slug": "signal", "description": "This module provides mechanisms to use signal handlers in Python.\n\nFunctions:\n\nalarm() -- cause SIGALRM after a specified time [Unix only]\nsetitimer() -- cause a signal (described below) after a specified\n               float time and the timer may restart then [Unix only]\ngetitimer() -- get current value of timer [Unix only]\nsignal() -- set the action for a given signal\ngetsignal() -- get the signal action for a given signal\npause() -- wait until a signal arrives [Unix only]\ndefault_int_handler() -- default SIGINT handler\n\nsignal constants:\nSIG_DFL -- used to refer to the system default handler\nSIG_IGN -- used to ignore the signal\nNSIG -- number of defined signals\nSIGINT, SIGTERM, etc. -- signal numbers\n\nitimer constants:\nITIMER_REAL -- decrements in real time, and delivers SIGALRM upon\n               expiration\nITIMER_VIRTUAL -- decrements only when the process is executing,\n               and delivers SIGVTALRM upon expiration\nITIMER_PROF -- decrements both when the process is executing and\n               when the system is executing on behalf of the process.\n               Coupled with ITIMER_VIRTUAL, this timer is usually\n               used to profile the time spent by the application\n               in user and kernel space. SIGPROF is delivered upon\n               expiration.\n\n\n*** IMPORTANT NOTICE ***\nA signal handler function is called with two arguments:\nthe first is the signal number, the second is the interrupted stack frame."}}, {"pk": 512, "model": "website.keyword", "fields": {"category": 3, "codname": "popen2", "slug": "popen2", "description": "Spawn a command with pipes to its stdin, stdout, and optionally stderr.\n\nThe normal os.popen(cmd, mode) call spawns a shell command and provides a\nfile interface to just the input or output of the process depending on\nwhether mode is 'r' or 'w'.  This module provides the functions popen2(cmd)\nand popen3(cmd) which return two or three pipes to the spawned command.\n"}}, {"pk": 513, "model": "website.keyword", "fields": {"category": 3, "codname": "asyncore", "slug": "asyncore", "description": "Basic infrastructure for asynchronous socket service clients and servers.\n\nThere are only two ways to have a program on a single processor do \"more\nthan one thing at a time\".  Multi-threaded programming is the simplest and\nmost popular way to do it, but there is another very different technique,\nthat lets you have nearly all the advantages of multi-threading, without\nactually using multiple threads. it's really only practical if your program\nis largely I/O bound. If your program is CPU bound, then pre-emptive\nscheduled threads are probably what you really need. Network servers are\nrarely CPU-bound, however.\n\nIf your operating system supports the select() system call in its I/O\nlibrary (and nearly all do), then you can use it to juggle multiple\ncommunication channels at once; doing other work while your I/O is taking\nplace in the \"background.\"  Although this strategy can seem strange and\ncomplex, especially at first, it is in many ways easier to understand and\ncontrol than multi-threaded programming. The module documented here solves\nmany of the difficult problems for you, making the task of building\nsophisticated high-performance network servers and clients a snap.\n"}}, {"pk": 514, "model": "website.keyword", "fields": {"category": 3, "codname": "asynchat", "slug": "asynchat", "description": "A class supporting chat-style (command/response) protocols.\n\nThis class adds support for 'chat' style protocols - where one side\nsends a 'command', and the other sends a response (examples would be\nthe common internet protocols - smtp, nntp, ftp, etc..).\n\nThe handle_read() method looks at the input stream for the current\n'terminator' (usually '\\r\\n' for single-line responses, '\\r\\n.\\r\\n'\nfor multi-line output), calling self.found_terminator() on its\nreceipt.\n\nfor example:\nSay you build an async nntp client using this class.  At the start\nof the connection, you'll have self.terminator set to '\\r\\n', in\norder to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\ncommand will be accumulated (using your own 'collect_incoming_data'\nmethod) up to the terminator, and then control will be returned to\nyou - by calling your self.found_terminator() method.\n"}}, {"pk": 515, "model": "website.keyword", "fields": {"category": 3, "codname": "email", "slug": "email", "description": "A package for parsing, handling, and generating email messages."}}, {"pk": 516, "model": "website.keyword", "fields": {"category": 3, "codname": "json", "slug": "json", "description": "JSON (JavaScript Object Notation) <http://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\n:mod:`json` exposes an API familiar to users of the standard library\n:mod:`marshal` and :mod:`pickle` modules. It is the externally maintained\nversion of the :mod:`json` library contained in Python 2.6, but maintains\ncompatibility with Python 2.4 and Python 2.5 and (currently) has\nsignificant performance advantages, even without using the optional C\nextension for speedups.\n\nEncoding basic Python object hierarchies::\n\n    >>> import json\n    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n    '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n    >>> print json.dumps(\"\\\"foo\\bar\")\n    \"\\\"foo\\bar\"\n    >>> print json.dumps(u'\\u1234')\n    \"\\u1234\"\n    >>> print json.dumps('\\\\')\n    \"\\\\\"\n    >>> print json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True)\n    {\"a\": 0, \"b\": 0, \"c\": 0}\n    >>> from StringIO import StringIO\n    >>> io = StringIO()\n    >>> json.dump(['streaming API'], io)\n    >>> io.getvalue()\n    '[\"streaming API\"]'\n\nCompact encoding::\n\n    >>> import json\n    >>> json.dumps([1,2,3,{'4': 5, '6': 7}], sort_keys=True, separators=(',',':'))\n    '[1,2,3,{\"4\":5,\"6\":7}]'\n\nPretty printing::\n\n    >>> import json\n    >>> print json.dumps({'4': 5, '6': 7}, sort_keys=True,\n    ...                  indent=4, separators=(',', ': '))\n    {\n        \"4\": 5,\n        \"6\": 7\n    }\n\nDecoding JSON::\n\n    >>> import json\n    >>> obj = [u'foo', {u'bar': [u'baz', None, 1.0, 2]}]\n    >>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\n    True\n    >>> json.loads('\"\\\\\"foo\\\\bar\"') == u'\"foo\\x08ar'\n    True\n    >>> from StringIO import StringIO\n    >>> io = StringIO('[\"streaming API\"]')\n    >>> json.load(io)[0] == 'streaming API'\n    True\n\nSpecializing JSON object decoding::\n\n    >>> import json\n    >>> def as_complex(dct):\n    ...     if '__complex__' in dct:\n    ...         return complex(dct['real'], dct['imag'])\n    ...     return dct\n    ...\n    >>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n    ...     object_hook=as_complex)\n    (1+2j)\n    >>> from decimal import Decimal\n    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\n    True\n\nSpecializing JSON object encoding::\n\n    >>> import json\n    >>> def encode_complex(obj):\n    ...     if isinstance(obj, complex):\n    ...         return [obj.real, obj.imag]\n    ...     raise TypeError(repr(o) + \" is not JSON serializable\")\n    ...\n    >>> json.dumps(2 + 1j, default=encode_complex)\n    '[2.0, 1.0]'\n    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n    '[2.0, 1.0]'\n    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n    '[2.0, 1.0]'\n\n\nUsing json.tool from the shell to validate and pretty-print::\n\n    $ echo '{\"json\":\"obj\"}' | python -m json.tool\n    {\n        \"json\": \"obj\"\n    }\n    $ echo '{ 1.2:3.4}' | python -m json.tool\n    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)\n"}}, {"pk": 517, "model": "website.keyword", "fields": {"category": 3, "codname": "mailcap", "slug": "mailcap", "description": "Mailcap file handling.  See RFC 1524."}}, {"pk": 518, "model": "website.keyword", "fields": {"category": 3, "codname": "mailbox", "slug": "mailbox", "description": "Read/write support for Maildir, mbox, MH, Babyl, and MMDF mailboxes."}}, {"pk": 519, "model": "website.keyword", "fields": {"category": 3, "codname": "mhlib", "slug": "mhlib", "description": "MH interface -- purely object-oriented (well, almost)\n\nExecutive summary:\n\nimport mhlib\n\nmh = mhlib.MH()         # use default mailbox directory and profile\nmh = mhlib.MH(mailbox)  # override mailbox location (default from profile)\nmh = mhlib.MH(mailbox, profile) # override mailbox and profile\n\nmh.error(format, ...)   # print error message -- can be overridden\ns = mh.getprofile(key)  # profile entry (None if not set)\npath = mh.getpath()     # mailbox pathname\nname = mh.getcontext()  # name of current folder\nmh.setcontext(name)     # set name of current folder\n\nlist = mh.listfolders() # names of top-level folders\nlist = mh.listallfolders() # names of all folders, including subfolders\nlist = mh.listsubfolders(name) # direct subfolders of given folder\nlist = mh.listallsubfolders(name) # all subfolders of given folder\n\nmh.makefolder(name)     # create new folder\nmh.deletefolder(name)   # delete folder -- must have no subfolders\n\nf = mh.openfolder(name) # new open folder object\n\nf.error(format, ...)    # same as mh.error(format, ...)\npath = f.getfullname()  # folder's full pathname\npath = f.getsequencesfilename() # full pathname of folder's sequences file\npath = f.getmessagefilename(n)  # full pathname of message n in folder\n\nlist = f.listmessages() # list of messages in folder (as numbers)\nn = f.getcurrent()      # get current message\nf.setcurrent(n)         # set current message\nlist = f.parsesequence(seq)     # parse msgs syntax into list of messages\nn = f.getlast()         # get last message (0 if no messagse)\nf.setlast(n)            # set last message (internal use only)\n\ndict = f.getsequences() # dictionary of sequences in folder {name: list}\nf.putsequences(dict)    # write sequences back to folder\n\nf.createmessage(n, fp)  # add message from file f as number n\nf.removemessages(list)  # remove messages in list from folder\nf.refilemessages(list, tofolder) # move messages in list to other folder\nf.movemessage(n, tofolder, ton)  # move one message to a given destination\nf.copymessage(n, tofolder, ton)  # copy one message to a given destination\n\nm = f.openmessage(n)    # new open message object (costs a file descriptor)\nm is a derived class of mimetools.Message(rfc822.Message), with:\ns = m.getheadertext()   # text of message's headers\ns = m.getheadertext(pred) # text of message's headers, filtered by pred\ns = m.getbodytext()     # text of message's body, decoded\ns = m.getbodytext(0)    # text of message's body, not decoded\n"}}, {"pk": 520, "model": "website.keyword", "fields": {"category": 3, "codname": "mimetools", "slug": "mimetools", "description": "Various tools used by MIME-reading or MIME-writing programs."}}, {"pk": 521, "model": "website.keyword", "fields": {"category": 3, "codname": "mimetypes", "slug": "mimetypes", "description": "Guess the MIME type of a file.\n\nThis module defines two useful functions:\n\nguess_type(url, strict=1) -- guess the MIME type and encoding of a URL.\n\nguess_extension(type, strict=1) -- guess the extension for a given MIME type.\n\nIt also contains the following, for tuning the behavior:\n\nData:\n\nknownfiles -- list of files to parse\ninited -- flag set when init() has been called\nsuffix_map -- dictionary mapping suffixes to suffixes\nencodings_map -- dictionary mapping suffixes to encodings\ntypes_map -- dictionary mapping suffixes to types\n\nFunctions:\n\ninit([files]) -- parse a list of files, default knownfiles (on Windows, the\n  default values are taken from the registry)\nread_mime_types(file) -- parse one file, return a dictionary or None\n"}}, {"pk": 522, "model": "website.keyword", "fields": {"category": 3, "codname": "mimify", "slug": "mimify", "description": "Mimification and unmimification of mail messages.\n\nDecode quoted-printable parts of a mail message or encode using\nquoted-printable.\n\nUsage:\n        mimify(input, output)\n        unmimify(input, output, decode_base64 = 0)\nto encode and decode respectively.  Input and output may be the name\nof a file or an open file object.  Only a readline() method is used\non the input file, only a write() method is used on the output file.\nWhen using file names, the input and output file names may be the\nsame.\n\nInteractive usage:\n        mimify.py -e [infile [outfile]]\n        mimify.py -d [infile [outfile]]\nto encode and decode respectively.  Infile defaults to standard\ninput and outfile to standard output.\n"}}, {"pk": 523, "model": "website.keyword", "fields": {"category": 3, "codname": "multifile", "slug": "multifile", "description": "A readline()-style interface to the parts of a multipart message.\n\nThe MultiFile class makes each part of a multipart message \"feel\" like\nan ordinary file, as long as you use fp.readline().  Allows recursive\nuse, for nested multipart messages.  Probably best used together\nwith module mimetools.\n\nSuggested use:\n\nreal_fp = open(...)\nfp = MultiFile(real_fp)\n\n\"read some lines from fp\"\nfp.push(separator)\nwhile 1:\n        \"read lines from fp until it returns an empty string\" (A)\n        if not fp.next(): break\nfp.pop()\n\"read remaining lines from fp until it returns an empty string\"\n\nThe latter sequence may be used recursively at (A).\nIt is also allowed to use multiple push()...pop() sequences.\n\nIf seekable is given as 0, the class code will not do the bookkeeping\nit normally attempts in order to make seeks relative to the beginning of the\ncurrent file part.  This may be useful when using MultiFile with a non-\nseekable stream object.\n"}}, {"pk": 524, "model": "website.keyword", "fields": {"category": 3, "codname": "rfc822", "slug": "rfc822", "description": "RFC 2822 message manipulation.\n\nNote: This is only a very rough sketch of a full RFC-822 parser; in particular\nthe tokenizing of addresses does not adhere to all the quoting rules.\n\nNote: RFC 2822 is a long awaited update to RFC 822.  This module should\nconform to RFC 2822, and is thus mis-named (it's not worth renaming it).  Some\neffort at RFC 2822 updates have been made, but a thorough audit has not been\nperformed.  Consider any RFC 2822 non-conformance to be a bug.\n\n    RFC 2822: http://www.faqs.org/rfcs/rfc2822.html\n    RFC 822 : http://www.faqs.org/rfcs/rfc822.html (obsolete)\n\nDirections for use:\n\nTo create a Message object: first open a file, e.g.:\n\n  fp = open(file, 'r')\n\nYou can use any other legal way of getting an open file object, e.g. use\nsys.stdin or call os.popen().  Then pass the open file object to the Message()\nconstructor:\n\n  m = Message(fp)\n\nThis class can work with any input object that supports a readline method.  If\nthe input object has seek and tell capability, the rewindbody method will\nwork; also illegal lines will be pushed back onto the input stream.  If the\ninput object lacks seek but has an `unread' method that can push back a line\nof input, Message will use that to push back illegal lines.  Thus this class\ncan be used to parse messages coming from a buffered stream.\n\nThe optional `seekable' argument is provided as a workaround for certain stdio\nlibraries in which tell() discards buffered data before discovering that the\nlseek() system call doesn't work.  For maximum portability, you should set the\nseekable argument to zero to prevent that initial \\code{tell} when passing in\nan unseekable object such as a file object created from a socket object.  If\nit is 1 on entry -- which it is by default -- the tell() method of the open\nfile object is called once; if this raises an exception, seekable is reset to\n0.  For other nonzero values of seekable, this test is not made.\n\nTo get the text of a particular header there are several methods:\n\n  str = m.getheader(name)\n  str = m.getrawheader(name)\n\nwhere name is the name of the header, e.g. 'Subject'.  The difference is that\ngetheader() strips the leading and trailing whitespace, while getrawheader()\ndoesn't.  Both functions retain embedded whitespace (including newlines)\nexactly as they are specified in the header, and leave the case of the text\nunchanged.\n\nFor addresses and address lists there are functions\n\n  realname, mailaddress = m.getaddr(name)\n  list = m.getaddrlist(name)\n\nwhere the latter returns a list of (realname, mailaddr) tuples.\n\nThere is also a method\n\n  time = m.getdate(name)\n\nwhich parses a Date-like field and returns a time-compatible tuple,\ni.e. a tuple such as returned by time.localtime() or accepted by\ntime.mktime().\n\nSee the class definition for lower level access methods.\n\nThere are also some utility functions here.\n"}}, {"pk": 525, "model": "website.keyword", "fields": {"category": 3, "codname": "base64", "slug": "base64", "description": "RFC 3548: Base16, Base32, Base64 Data Encodings"}}, {"pk": 526, "model": "website.keyword", "fields": {"category": 3, "codname": "binhex", "slug": "binhex", "description": "Macintosh binhex compression/decompression.\n\neasy interface:\nbinhex(inputfilename, outputfilename)\nhexbin(inputfilename, outputfilename)\n"}}, {"pk": 527, "model": "website.keyword", "fields": {"category": 3, "codname": "binascii", "slug": "binascii", "description": "Conversion between binary data and ASCII"}}, {"pk": 528, "model": "website.keyword", "fields": {"category": 3, "codname": "quopri", "slug": "quopri", "description": "Conversions to/from quoted-printable transport encoding as per RFC 1521."}}, {"pk": 529, "model": "website.keyword", "fields": {"category": 3, "codname": "uu", "slug": "uu", "description": "Implementation of the UUencode and UUdecode functions.\n\nencode(in_file, out_file [,name, mode])\ndecode(in_file [, out_file, mode])\n"}}, {"pk": 530, "model": "website.keyword", "fields": {"category": 3, "codname": "sgmllib", "slug": "sgmllib", "description": "A parser for SGML, using the derived class as a static DTD."}}, {"pk": 531, "model": "website.keyword", "fields": {"category": 3, "codname": "htmllib", "slug": "htmllib", "description": "HTML 2.0 parser.\n\nSee the HTML 2.0 specification:\nhttp://www.w3.org/hypertext/WWW/MarkUp/html-spec/html-spec_toc.html\n"}}, {"pk": 532, "model": "website.keyword", "fields": {"category": 3, "codname": "xml", "slug": "xml", "description": "Core XML support for Python.\n\nThis package contains four sub-packages:\n\ndom -- The W3C Document Object Model.  This supports DOM Level 1 +\n       Namespaces.\n\nparsers -- Python wrappers for XML parsers (currently only supports Expat).\n\nsax -- The Simple API for XML, developed by XML-Dev, led by David\n       Megginson and ported to Python by Lars Marius Garshol.  This\n       supports the SAX 2 API.\n\netree -- The ElementTree XML library.  This is a subset of the full\n       ElementTree XML release.\n\n"}}, {"pk": 533, "model": "website.keyword", "fields": {"category": 3, "codname": "pyexpat", "slug": "pyexpat", "description": "Python wrapper for Expat parser."}}, {"pk": 534, "model": "website.keyword", "fields": {"category": 3, "codname": "webbrowser", "slug": "webbrowser", "description": "Interfaces for launching and remotely controlling Web browsers."}}, {"pk": 535, "model": "website.keyword", "fields": {"category": 3, "codname": "cgi", "slug": "cgi", "description": "Support module for CGI (Common Gateway Interface) scripts.\n\nThis module defines a number of utilities for use by CGI scripts\nwritten in Python.\n"}}, {"pk": 536, "model": "website.keyword", "fields": {"category": 3, "codname": "cgitb", "slug": "cgitb", "description": "More comprehensive traceback formatting for Python scripts.\n\nTo enable this module, do:\n\n    import cgitb; cgitb.enable()\n\nat the top of your script.  The optional arguments to enable() are:\n\n    display     - if true, tracebacks are displayed in the web browser\n    logdir      - if set, tracebacks are written to files in this directory\n    context     - number of lines of source code to show for each stack frame\n    format      - 'text' or 'html' controls the output format\n\nBy default, tracebacks are displayed but not saved, the context is 5 lines\nand the output format is 'html' (for backwards compatibility with the\noriginal use of this module)\n\nAlternatively, if you have caught an exception and want cgitb to display it\nfor you, call cgitb.handler().  The optional argument to handler() is a\n3-item tuple (etype, evalue, etb) just like the value of sys.exc_info().\nThe default handler displays output as HTML.\n\n"}}, {"pk": 537, "model": "website.keyword", "fields": {"category": 3, "codname": "wsgiref", "slug": "wsgiref", "description": "wsgiref -- a WSGI (PEP 333) Reference Library\n\nCurrent Contents:\n\n* util -- Miscellaneous useful functions and wrappers\n\n* headers -- Manage response headers\n\n* handlers -- base classes for server/gateway implementations\n\n* simple_server -- a simple BaseHTTPServer that supports WSGI\n\n* validate -- validation wrapper that sits between an app and a server\n  to detect errors in either\n\nTo-Do:\n\n* cgi_gateway -- Run WSGI apps under CGI (pending a deployment standard)\n\n* cgi_wrapper -- Run CGI apps under WSGI\n\n* router -- a simple middleware component that handles URL traversal\n"}}, {"pk": 538, "model": "website.keyword", "fields": {"category": 3, "codname": "urllib", "slug": "urllib", "description": "Open an arbitrary URL.\n\nSee the following document for more info on URLs:\n\"Names and Addresses, URIs, URLs, URNs, URCs\", at\nhttp://www.w3.org/pub/WWW/Addressing/Overview.html\n\nSee also the HTTP spec (from which the error codes are derived):\n\"HTTP - Hypertext Transfer Protocol\", at\nhttp://www.w3.org/pub/WWW/Protocols/\n\nRelated standards and specs:\n- RFC1808: the \"relative URL\" spec. (authoritative status)\n- RFC1738 - the \"URL standard\". (authoritative status)\n- RFC1630 - the \"URI spec\". (informational status)\n\nThe object returned by URLopener().open(file) will differ per\nprotocol.  All you know is that is has methods read(), readline(),\nreadlines(), fileno(), close() and info().  The read*(), fileno()\nand close() methods work like those of open files.\nThe info() method returns a mimetools.Message object which can be\nused to query various info about the object, if available.\n(mimetools.Message objects are queried with the getheader() method.)\n"}}, {"pk": 539, "model": "website.keyword", "fields": {"category": 3, "codname": "urllib2", "slug": "urllib2", "description": "An extensible library for opening URLs using a variety of protocols\n\nThe simplest way to use this module is to call the urlopen function,\nwhich accepts a string containing a URL or a Request object (described\nbelow).  It opens the URL and returns the results as file-like\nobject; the returned object has some extra methods described below.\n\nThe OpenerDirector manages a collection of Handler objects that do\nall the actual work.  Each Handler implements a particular protocol or\noption.  The OpenerDirector is a composite object that invokes the\nHandlers needed to open the requested URL.  For example, the\nHTTPHandler performs HTTP GET and POST requests and deals with\nnon-error returns.  The HTTPRedirectHandler automatically deals with\nHTTP 301, 302, 303 and 307 redirect errors, and the HTTPDigestAuthHandler\ndeals with digest authentication.\n\nurlopen(url, data=None) -- Basic usage is the same as original\nurllib.  pass the url and optionally data to post to an HTTP URL, and\nget a file-like object back.  One difference is that you can also pass\na Request instance instead of URL.  Raises a URLError (subclass of\nIOError); for HTTP errors, raises an HTTPError, which can also be\ntreated as a valid response.\n\nbuild_opener -- Function that creates a new OpenerDirector instance.\nWill install the default handlers.  Accepts one or more Handlers as\narguments, either instances or Handler classes that it will\ninstantiate.  If one of the argument is a subclass of the default\nhandler, the argument will be installed instead of the default.\n\ninstall_opener -- Installs a new opener as the default opener.\n\nobjects of interest:\n\nOpenerDirector -- Sets up the User Agent as the Python-urllib client and manages\nthe Handler classes, while dealing with requests and responses.\n\nRequest -- An object that encapsulates the state of a request.  The\nstate can be as simple as the URL.  It can also include extra HTTP\nheaders, e.g. a User-Agent.\n\nBaseHandler --\n\nexceptions:\nURLError -- A subclass of IOError, individual protocols have their own\nspecific subclass.\n\nHTTPError -- Also a valid HTTP response, so you can treat an HTTP error\nas an exceptional event or valid response.\n\ninternals:\nBaseHandler and parent\n_call_chain conventions\n\nExample usage:\n\nimport urllib2\n\n# set up authentication info\nauthinfo = urllib2.HTTPBasicAuthHandler()\nauthinfo.add_password(realm='PDQ Application',\n                      uri='https://mahler:8092/site-updates.py',\n                      user='klem',\n                      passwd='geheim$parole')\n\nproxy_support = urllib2.ProxyHandler({\"http\" : \"http://ahad-haam:3128\"})\n\n# build a new opener that adds authentication and caching FTP handlers\nopener = urllib2.build_opener(proxy_support, authinfo, urllib2.CacheFTPHandler)\n\n# install it\nurllib2.install_opener(opener)\n\nf = urllib2.urlopen('http://www.python.org/')\n\n\n"}}, {"pk": 540, "model": "website.keyword", "fields": {"category": 3, "codname": "httplib", "slug": "httplib", "description": "HTTP/1.1 client library\n\n<intro stuff goes here>\n<other stuff, too>\n\nHTTPConnection goes through a number of \"states\", which define when a client\nmay legally make another request or fetch the response for a particular\nrequest. This diagram details these state transitions:\n\n    (null)\n      |\n      | HTTPConnection()\n      v\n    Idle\n      |\n      | putrequest()\n      v\n    Request-started\n      |\n      | ( putheader() )*  endheaders()\n      v\n    Request-sent\n      |\n      | response = getresponse()\n      v\n    Unread-response   [Response-headers-read]\n      |\\____________________\n      |                     |\n      | response.read()     | putrequest()\n      v                     v\n    Idle                  Req-started-unread-response\n                     ______/|\n                   /        |\n   response.read() |        | ( putheader() )*  endheaders()\n                   v        v\n       Request-started    Req-sent-unread-response\n                            |\n                            | response.read()\n                            v\n                          Request-sent\n\nThis diagram presents the following rules:\n  -- a second request may not be started until {response-headers-read}\n  -- a response [object] cannot be retrieved until {request-sent}\n  -- there is no differentiation between an unread response body and a\n     partially read response body\n\nNote: this enforcement is applied by the HTTPConnection class. The\n      HTTPResponse class does not enforce this state machine, which\n      implies sophisticated clients may accelerate the request/response\n      pipeline. Caution should be taken, though: accelerating the states\n      beyond the above pattern may imply knowledge of the server's\n      connection-close behavior for certain requests. For example, it\n      is impossible to tell whether the server will close the connection\n      UNTIL the response headers have been read; this means that further\n      requests cannot be placed into the pipeline until it is known that\n      the server will NOT be closing the connection.\n\nLogical State                  __state            __response\n-------------                  -------            ----------\nIdle                           _CS_IDLE           None\nRequest-started                _CS_REQ_STARTED    None\nRequest-sent                   _CS_REQ_SENT       None\nUnread-response                _CS_IDLE           <response_class>\nReq-started-unread-response    _CS_REQ_STARTED    <response_class>\nReq-sent-unread-response       _CS_REQ_SENT       <response_class>\n"}}, {"pk": 541, "model": "website.keyword", "fields": {"category": 3, "codname": "ftplib", "slug": "ftplib", "description": "An FTP client class and some helper functions.\n\nBased on RFC 959: File Transfer Protocol (FTP), by J. Postel and J. Reynolds\n\nExample:\n\n>>> from ftplib import FTP\n>>> ftp = FTP('ftp.python.org') # connect to host, default port\n>>> ftp.login() # default, i.e.: user anonymous, passwd anonymous@\n'230 Guest login ok, access restrictions apply.'\n>>> ftp.retrlines('LIST') # list directory contents\ntotal 9\ndrwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .\ndrwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..\ndrwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin\ndrwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc\nd-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming\ndrwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib\ndrwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub\ndrwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr\n-rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg\n'226 Transfer complete.'\n>>> ftp.quit()\n'221 Goodbye.'\n>>>\n\nA nice test that reveals some of the network dialogue would be:\npython ftplib.py -d localhost -l -p -l\n"}}, {"pk": 542, "model": "website.keyword", "fields": {"category": 3, "codname": "poplib", "slug": "poplib", "description": "A POP3 client class.\n\nBased on the J. Myers POP3 draft, Jan. 96\n"}}, {"pk": 543, "model": "website.keyword", "fields": {"category": 3, "codname": "imaplib", "slug": "imaplib", "description": "IMAP4 client.\n\nBased on RFC 2060.\n\nPublic class:           IMAP4\nPublic variable:        Debug\nPublic functions:       Internaldate2tuple\n                        Int2AP\n                        ParseFlags\n                        Time2Internaldate\n"}}, {"pk": 544, "model": "website.keyword", "fields": {"category": 3, "codname": "nntplib", "slug": "nntplib", "description": "An NNTP client class based on RFC 977: Network News Transfer Protocol.\n\nExample:\n\n>>> from nntplib import NNTP\n>>> s = NNTP('news')\n>>> resp, count, first, last, name = s.group('comp.lang.python')\n>>> print 'Group', name, 'has', count, 'articles, range', first, 'to', last\nGroup comp.lang.python has 51 articles, range 5770 to 5821\n>>> resp, subs = s.xhdr('subject', first + '-' + last)\n>>> resp = s.quit()\n>>>\n\nHere 'resp' is the server response line.\nError responses are turned into exceptions.\n\nTo post an article from a file:\n>>> f = open(filename, 'r') # file containing article, including header\n>>> resp = s.post(f)\n>>>\n\nFor descriptions of all methods, read the comments in the code below.\nNote that all arguments and return values representing article numbers\nare strings, not numbers, since they are rarely used for calculations.\n"}}, {"pk": 545, "model": "website.keyword", "fields": {"category": 3, "codname": "smtplib", "slug": "smtplib", "description": "SMTP/ESMTP client class.\n\nThis should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP\nAuthentication) and RFC 2487 (Secure SMTP over TLS).\n\nNotes:\n\nPlease remember, when doing ESMTP, that the names of the SMTP service\nextensions are NOT the same thing as the option keywords for the RCPT\nand MAIL commands!\n\nExample:\n\n  >>> import smtplib\n  >>> s=smtplib.SMTP(\"localhost\")\n  >>> print s.help()\n  This is Sendmail version 8.8.4\n  Topics:\n      HELO    EHLO    MAIL    RCPT    DATA\n      RSET    NOOP    QUIT    HELP    VRFY\n      EXPN    VERB    ETRN    DSN\n  For more info use \"HELP <topic>\".\n  To report bugs in the implementation send email to\n      sendmail-bugs@sendmail.org.\n  For local information send email to Postmaster at your site.\n  End of HELP info\n  >>> s.putcmd(\"vrfy\",\"someone@here\")\n  >>> s.getreply()\n  (250, \"Somebody OverHere <somebody@here.my.org>\")\n  >>> s.quit()\n"}}, {"pk": 546, "model": "website.keyword", "fields": {"category": 3, "codname": "smtpd", "slug": "smtpd", "description": "An RFC 2821 smtp proxy.\n\nUsage: %(program)s [options] [localhost:localport [remotehost:remoteport]]\n\nOptions:\n\n    --nosetuid\n    -n\n        This program generally tries to setuid `nobody', unless this flag is\n        set.  The setuid call will fail if this program is not run as root (in\n        which case, use this flag).\n\n    --version\n    -V\n        Print the version number and exit.\n\n    --class classname\n    -c classname\n        Use `classname' as the concrete SMTP proxy class.  Uses `PureProxy' by\n        default.\n\n    --debug\n    -d\n        Turn on debugging prints.\n\n    --help\n    -h\n        Print this message and exit.\n\nVersion: %(__version__)s\n\nIf localhost is not given then `localhost' is used, and if localport is not\ngiven then 8025 is used.  If remotehost is not given then `localhost' is used,\nand if remoteport is not given, then 25 is used.\n"}}, {"pk": 547, "model": "website.keyword", "fields": {"category": 3, "codname": "telnetlib", "slug": "telnetlib", "description": "TELNET client class.\n\nBased on RFC 854: TELNET Protocol Specification, by J. Postel and\nJ. Reynolds\n\nExample:\n\n>>> from telnetlib import Telnet\n>>> tn = Telnet('www.python.org', 79)   # connect to finger port\n>>> tn.write('guido\\r\\n')\n>>> print tn.read_all()\nLogin       Name               TTY         Idle    When    Where\nguido    Guido van Rossum      pts/2        <Dec  2 11:10> snag.cnri.reston..\n\n>>>\n\nNote that read_all() won't read until eof -- it just reads some data\n-- but it guarantees to read at least one byte unless EOF is hit.\n\nIt is possible to pass a Telnet object to select.select() in order to\nwait until more data is available.  Note that in this case,\nread_eager() may return '' even if there was data on the socket,\nbecause the protocol negotiation may have eaten the data.  This is why\nEOFError is needed in some cases to distinguish between \"no data\" and\n\"connection closed\" (since the socket also appears ready for reading\nwhen it is closed).\n\nTo do:\n- option negotiation\n- timeout should be intrinsic to the connection object instead of an\n  option on one of the read calls only\n\n"}}, {"pk": 548, "model": "website.keyword", "fields": {"category": 3, "codname": "uuid", "slug": "uuid", "description": "UUID objects (universally unique identifiers) according to RFC 4122.\n\nThis module provides immutable UUID objects (class UUID) and the functions\nuuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5\nUUIDs as specified in RFC 4122.\n\nIf all you want is a unique ID, you should probably call uuid1() or uuid4().\nNote that uuid1() may compromise privacy since it creates a UUID containing\nthe computer's network address.  uuid4() creates a random UUID.\n\nTypical usage:\n\n    >>> import uuid\n\n    # make a UUID based on the host ID and current time\n    >>> uuid.uuid1()\n    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n\n    # make a UUID using an MD5 hash of a namespace UUID and a name\n    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n\n    # make a random UUID\n    >>> uuid.uuid4()\n    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n\n    # make a UUID using a SHA-1 hash of a namespace UUID and a name\n    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n\n    # make a UUID from a string of hex digits (braces and hyphens ignored)\n    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')\n\n    # convert a UUID to a string of hex digits in standard form\n    >>> str(x)\n    '00010203-0405-0607-0809-0a0b0c0d0e0f'\n\n    # get the raw 16 bytes of the UUID\n    >>> x.bytes\n    '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n\n    # make a UUID from a 16-byte string\n    >>> uuid.UUID(bytes=x.bytes)\n    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')\n"}}, {"pk": 549, "model": "website.keyword", "fields": {"category": 3, "codname": "urlparse", "slug": "urlparse", "description": "Parse (absolute and relative) URLs.\n\nurlparse module is based upon the following RFC specifications.\n\nRFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding\nand L.  Masinter, January 2005.\n\nRFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter\nand L.Masinter, December 1999.\n\nRFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.\nBerners-Lee, R. Fielding, and L. Masinter, August 1998.\n\nRFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.\n\nRFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June\n1995.\n\nRFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.\nMcCahill, December 1994\n\nRFC 3986 is considered the current standard and any future changes to\nurlparse module should conform with it.  The urlparse module is\ncurrently not entirely compliant with this RFC due to defacto\nscenarios for parsing, and for backward compatibility purposes, some\nparsing quirks from older RFCs are retained. The testcases in\ntest_urlparse.py provides a good indicator of parsing behavior.\n\n"}}, {"pk": 550, "model": "website.keyword", "fields": {"category": 3, "codname": "cookielib", "slug": "cookielib", "description": "HTTP cookie handling for web clients.\n\nThis module has (now fairly distant) origins in Gisle Aas' Perl module\nHTTP::Cookies, from the libwww-perl library.\n\nDocstrings, comments and debug strings in this code refer to the\nattributes of the HTTP cookie system as cookie-attributes, to distinguish\nthem clearly from Python attributes.\n\nClass diagram (note that BSDDBCookieJar and the MSIE* classes are not\ndistributed with the Python standard library, but are available from\nhttp://wwwsearch.sf.net/):\n\n                        CookieJar____\n                        /     \\      \\\n            FileCookieJar      \\      \\\n             /    |   \\         \\      \\\n MozillaCookieJar | LWPCookieJar \\      \\\n                  |               |      \\\n                  |   ---MSIEBase |       \\\n                  |  /      |     |        \\\n                  | /   MSIEDBCookieJar BSDDBCookieJar\n                  |/\n               MSIECookieJar\n\n"}}, {"pk": 551, "model": "website.keyword", "fields": {"category": 3, "codname": "xmlrpclib", "slug": "xmlrpclib", "description": "\nAn XML-RPC client interface for Python.\n\nThe marshalling and response parser code can also be used to\nimplement XML-RPC servers.\n\nExported exceptions:\n\n  Error          Base class for client errors\n  ProtocolError  Indicates an HTTP protocol error\n  ResponseError  Indicates a broken response package\n  Fault          Indicates an XML-RPC fault package\n\nExported classes:\n\n  ServerProxy    Represents a logical connection to an XML-RPC server\n\n  MultiCall      Executor of boxcared xmlrpc requests\n  Boolean        boolean wrapper to generate a \"boolean\" XML-RPC value\n  DateTime       dateTime wrapper for an ISO 8601 string or time tuple or\n                 localtime integer value to generate a \"dateTime.iso8601\"\n                 XML-RPC value\n  Binary         binary data wrapper\n\n  SlowParser     Slow but safe standard parser (based on xmllib)\n  Marshaller     Generate an XML-RPC params chunk from a Python data structure\n  Unmarshaller   Unmarshal an XML-RPC response from incoming XML event message\n  Transport      Handles an HTTP transaction to an XML-RPC server\n  SafeTransport  Handles an HTTPS transaction to an XML-RPC server\n\nExported constants:\n\n  True\n  False\n\nExported functions:\n\n  boolean        Convert any Python value to an XML-RPC boolean\n  getparser      Create instance of the fastest available parser & attach\n                 to an unmarshalling object\n  dumps          Convert an argument tuple or a Fault instance to an XML-RPC\n                 request (or response, if the methodresponse option is used).\n  loads          Convert an XML-RPC packet to unmarshalled data plus a method\n                 name (None if not present).\n"}}, {"pk": 552, "model": "website.keyword", "fields": {"category": 3, "codname": "audioop", "slug": "audioop", "description": ""}}, {"pk": 553, "model": "website.keyword", "fields": {"category": 3, "codname": "imageop", "slug": "imageop", "description": ""}}, {"pk": 554, "model": "website.keyword", "fields": {"category": 3, "codname": "aifc", "slug": "aifc", "description": "Stuff to parse AIFF-C and AIFF files.\r\n\r\nUnless explicitly stated otherwise, the description below is true\r\nboth for AIFF-C files and AIFF files.\r\n\r\nAn AIFF-C file has the following structure.\r\n\r\n  +-----------------+\r\n  | FORM            |\r\n  +-----------------+\r\n  | <size>          |\r\n  +----+------------+\r\n  |    | AIFC       |\r\n  |    +------------+\r\n  |    | <chunks>   |\r\n  |    |    .       |\r\n  |    |    .       |\r\n  |    |    .       |\r\n  +----+------------+\r\n\r\nAn AIFF file has the string \"AIFF\" instead of \"AIFC\".\r\n\r\nA chunk consists of an identifier (4 bytes) followed by a size (4 bytes,\r\nbig endian order), followed by the data.  The size field does not include\r\nthe size of the 8 byte header.\r\n\r\nThe following chunk types are recognized.\r\n\r\n  FVER\r\n      <version number of AIFF-C defining document> (AIFF-C only).\r\n  MARK\r\n      <# of markers> (2 bytes)\r\n      list of markers:\r\n          <marker ID> (2 bytes, must be > 0)\r\n          <position> (4 bytes)\r\n          <marker name> (\"pstring\")\r\n  COMM\r\n      <# of channels> (2 bytes)\r\n      <# of sound frames> (4 bytes)\r\n      <size of the samples> (2 bytes)\r\n      <sampling frequency> (10 bytes, IEEE 80-bit extended\r\n          floating point)\r\n      in AIFF-C files only:\r\n      <compression type> (4 bytes)\r\n      <human-readable version of compression type> (\"pstring\")\r\n  SSND\r\n      <offset> (4 bytes, not used by this program)\r\n      <blocksize> (4 bytes, not used by this program)\r\n      <sound data>\r\n\r\nA pstring consists of 1 byte length, a string of characters, and 0 or 1\r\nbyte pad to make the total length even.\r\n\r\nUsage.\r\n\r\nReading AIFF files:\r\n  f = aifc.open(file, 'r')\r\nwhere file is either the name of a file or an open file pointer.\r\nThe open file pointer must have methods read(), seek(), and close().\r\nIn some types of audio files, if the setpos() method is not used,\r\nthe seek() method is not necessary.\r\n\r\nThis returns an instance of a class with the following public methods:\r\n  getnchannels()  -- returns number of audio channels (1 for\r\n             mono, 2 for stereo)\r\n  getsampwidth()  -- returns sample width in bytes\r\n  getframerate()  -- returns sampling frequency\r\n  getnframes()    -- returns number of audio frames\r\n  getcomptype()   -- returns compression type ('NONE' for AIFF files)\r\n  getcompname()   -- returns human-readable version of\r\n             compression type ('not compressed' for AIFF files)\r\n  getparams() -- returns a tuple consisting of all of the\r\n             above in the above order\r\n  getmarkers()    -- get the list of marks in the audio file or None\r\n             if there are no marks\r\n  getmark(id) -- get mark with the specified id (raises an error\r\n             if the mark does not exist)\r\n  readframes(n)   -- returns at most n frames of audio\r\n  rewind()    -- rewind to the beginning of the audio stream\r\n  setpos(pos) -- seek to the specified position\r\n  tell()      -- return the current position\r\n  close()     -- close the instance (make it unusable)\r\nThe position returned by tell(), the position given to setpos() and\r\nthe position of marks are all compatible and have nothing to do with\r\nthe actual position in the file.\r\nThe close() method is called automatically when the class instance\r\nis destroyed.\r\n\r\nWriting AIFF files:\r\n  f = aifc.open(file, 'w')\r\nwhere file is either the name of a file or an open file pointer.\r\nThe open file pointer must have methods write(), tell(), seek(), and\r\nclose().\r\n\r\nThis returns an instance of a class with the following public methods:\r\n  aiff()      -- create an AIFF file (AIFF-C default)\r\n  aifc()      -- create an AIFF-C file\r\n  setnchannels(n) -- set the number of channels\r\n  setsampwidth(n) -- set the sample width\r\n  setframerate(n) -- set the frame rate\r\n  setnframes(n)   -- set the number of frames\r\n  setcomptype(type, name)\r\n          -- set the compression type and the\r\n             human-readable compression type\r\n  setparams(tuple)\r\n          -- set all parameters at once\r\n  setmark(id, pos, name)\r\n          -- add specified mark to the list of marks\r\n  tell()      -- return current position in output file (useful\r\n             in combination with setmark())\r\n  writeframesraw(data)\r\n          -- write audio frames without pathing up the\r\n             file header\r\n  writeframes(data)\r\n          -- write audio frames and patch up the file header\r\n  close()     -- patch up the file header and close the\r\n             output file\r\nYou should set the parameters before the first writeframesraw or\r\nwriteframes.  The total number of frames does not need to be set,\r\nbut when it is set to the correct value, the header does not have to\r\nbe patched up.\r\nIt is best to first set all parameters, perhaps possibly the\r\ncompression type, and then write audio frames using writeframesraw.\r\nWhen all frames have been written, either call writeframes('') or\r\nclose() to patch up the sizes in the header.\r\nMarks can be added anytime.  If there are any marks, ypu must call\r\nclose() after all frames have been written.\r\nThe close() method is called automatically when the class instance\r\nis destroyed.\r\n\r\nWhen a file is opened with the extension '.aiff', an AIFF file is\r\nwritten, otherwise an AIFF-C file is written.  This default can be\r\nchanged by calling aiff() or aifc() before the first writeframes or\r\nwriteframesraw.\r\n"}}, {"pk": 555, "model": "website.keyword", "fields": {"category": 3, "codname": "sunau", "slug": "sunau", "description": "Stuff to parse Sun and NeXT audio files.\n\nAn audio file consists of a header followed by the data.  The structure\nof the header is as follows.\n\n        +---------------+\n        | magic word    |\n        +---------------+\n        | header size   |\n        +---------------+\n        | data size     |\n        +---------------+\n        | encoding      |\n        +---------------+\n        | sample rate   |\n        +---------------+\n        | # of channels |\n        +---------------+\n        | info          |\n        |               |\n        +---------------+\n\nThe magic word consists of the 4 characters '.snd'.  Apart from the\ninfo field, all header fields are 4 bytes in size.  They are all\n32-bit unsigned integers encoded in big-endian byte order.\n\nThe header size really gives the start of the data.\nThe data size is the physical size of the data.  From the other\nparameters the number of frames can be calculated.\nThe encoding gives the way in which audio samples are encoded.\nPossible values are listed below.\nThe info field currently consists of an ASCII string giving a\nhuman-readable description of the audio file.  The info field is\npadded with NUL bytes to the header size.\n\nUsage.\n\nReading audio files:\n        f = sunau.open(file, 'r')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods read(), seek(), and close().\nWhen the setpos() and rewind() methods are not used, the seek()\nmethod is not  necessary.\n\nThis returns an instance of a class with the following public methods:\n        getnchannels()  -- returns number of audio channels (1 for\n                           mono, 2 for stereo)\n        getsampwidth()  -- returns sample width in bytes\n        getframerate()  -- returns sampling frequency\n        getnframes()    -- returns number of audio frames\n        getcomptype()   -- returns compression type ('NONE' or 'ULAW')\n        getcompname()   -- returns human-readable version of\n                           compression type ('not compressed' matches 'NONE')\n        getparams()     -- returns a tuple consisting of all of the\n                           above in the above order\n        getmarkers()    -- returns None (for compatibility with the\n                           aifc module)\n        getmark(id)     -- raises an error since the mark does not\n                           exist (for compatibility with the aifc module)\n        readframes(n)   -- returns at most n frames of audio\n        rewind()        -- rewind to the beginning of the audio stream\n        setpos(pos)     -- seek to the specified position\n        tell()          -- return the current position\n        close()         -- close the instance (make it unusable)\nThe position returned by tell() and the position given to setpos()\nare compatible and have nothing to do with the actual position in the\nfile.\nThe close() method is called automatically when the class instance\nis destroyed.\n\nWriting audio files:\n        f = sunau.open(file, 'w')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods write(), tell(), seek(), and\nclose().\n\nThis returns an instance of a class with the following public methods:\n        setnchannels(n) -- set the number of channels\n        setsampwidth(n) -- set the sample width\n        setframerate(n) -- set the frame rate\n        setnframes(n)   -- set the number of frames\n        setcomptype(type, name)\n                        -- set the compression type and the\n                           human-readable compression type\n        setparams(tuple)-- set all parameters at once\n        tell()          -- return current position in output file\n        writeframesraw(data)\n                        -- write audio frames without pathing up the\n                           file header\n        writeframes(data)\n                        -- write audio frames and patch up the file header\n        close()         -- patch up the file header and close the\n                           output file\nYou should set the parameters before the first writeframesraw or\nwriteframes.  The total number of frames does not need to be set,\nbut when it is set to the correct value, the header does not have to\nbe patched up.\nIt is best to first set all parameters, perhaps possibly the\ncompression type, and then write audio frames using writeframesraw.\nWhen all frames have been written, either call writeframes('') or\nclose() to patch up the sizes in the header.\nThe close() method is called automatically when the class instance\nis destroyed.\n"}}, {"pk": 556, "model": "website.keyword", "fields": {"category": 3, "codname": "wave", "slug": "wave", "description": "Stuff to parse WAVE files.\n\nUsage.\n\nReading WAVE files:\n      f = wave.open(file, 'r')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods read(), seek(), and close().\nWhen the setpos() and rewind() methods are not used, the seek()\nmethod is not  necessary.\n\nThis returns an instance of a class with the following public methods:\n      getnchannels()  -- returns number of audio channels (1 for\n                         mono, 2 for stereo)\n      getsampwidth()  -- returns sample width in bytes\n      getframerate()  -- returns sampling frequency\n      getnframes()    -- returns number of audio frames\n      getcomptype()   -- returns compression type ('NONE' for linear samples)\n      getcompname()   -- returns human-readable version of\n                         compression type ('not compressed' linear samples)\n      getparams()     -- returns a tuple consisting of all of the\n                         above in the above order\n      getmarkers()    -- returns None (for compatibility with the\n                         aifc module)\n      getmark(id)     -- raises an error since the mark does not\n                         exist (for compatibility with the aifc module)\n      readframes(n)   -- returns at most n frames of audio\n      rewind()        -- rewind to the beginning of the audio stream\n      setpos(pos)     -- seek to the specified position\n      tell()          -- return the current position\n      close()         -- close the instance (make it unusable)\nThe position returned by tell() and the position given to setpos()\nare compatible and have nothing to do with the actual position in the\nfile.\nThe close() method is called automatically when the class instance\nis destroyed.\n\nWriting WAVE files:\n      f = wave.open(file, 'w')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods write(), tell(), seek(), and\nclose().\n\nThis returns an instance of a class with the following public methods:\n      setnchannels(n) -- set the number of channels\n      setsampwidth(n) -- set the sample width\n      setframerate(n) -- set the frame rate\n      setnframes(n)   -- set the number of frames\n      setcomptype(type, name)\n                      -- set the compression type and the\n                         human-readable compression type\n      setparams(tuple)\n                      -- set all parameters at once\n      tell()          -- return current position in output file\n      writeframesraw(data)\n                      -- write audio frames without pathing up the\n                         file header\n      writeframes(data)\n                      -- write audio frames and patch up the file header\n      close()         -- patch up the file header and close the\n                         output file\nYou should set the parameters before the first writeframesraw or\nwriteframes.  The total number of frames does not need to be set,\nbut when it is set to the correct value, the header does not have to\nbe patched up.\nIt is best to first set all parameters, perhaps possibly the\ncompression type, and then write audio frames using writeframesraw.\nWhen all frames have been written, either call writeframes('') or\nclose() to patch up the sizes in the header.\nThe close() method is called automatically when the class instance\nis destroyed.\n"}}, {"pk": 557, "model": "website.keyword", "fields": {"category": 3, "codname": "chunk", "slug": "chunk", "description": "Simple class to read IFF chunks.\n\nAn IFF chunk (used in formats such as AIFF, TIFF, RMFF (RealMedia File\nFormat)) has the following structure:\n\n+----------------+\n| ID (4 bytes)   |\n+----------------+\n| size (4 bytes) |\n+----------------+\n| data           |\n| ...            |\n+----------------+\n\nThe ID is a 4-byte string which identifies the type of chunk.\n\nThe size field (a 32-bit value, encoded using big-endian byte order)\ngives the size of the whole chunk, including the 8-byte header.\n\nUsually an IFF-type file consists of one or more chunks.  The proposed\nusage of the Chunk class defined here is to instantiate an instance at\nthe start of each chunk and read from the instance until it reaches\nthe end, after which a new instance can be instantiated.  At the end\nof the file, creating a new instance will fail with a EOFError\nexception.\n\nUsage:\nwhile True:\n    try:\n        chunk = Chunk(file)\n    except EOFError:\n        break\n    chunktype = chunk.getname()\n    while True:\n        data = chunk.read(nbytes)\n        if not data:\n            pass\n        # do something with data\n\nThe interface is file-like.  The implemented methods are:\nread, close, seek, tell, isatty.\nExtra methods are: skip() (called by close, skips to the end of the chunk),\ngetname() (returns the name (ID) of the chunk)\n\nThe __init__ method has one required argument, a file-like object\n(including a chunk instance), and one optional argument, a flag which\nspecifies whether or not chunks are aligned on 2-byte boundaries.  The\ndefault is 1, i.e. aligned.\n"}}, {"pk": 558, "model": "website.keyword", "fields": {"category": 3, "codname": "colorsys", "slug": "colorsys", "description": "Conversion functions between RGB and other color systems.\n\nThis modules provides two functions for each color system ABC:\n\n  rgb_to_abc(r, g, b) --> a, b, c\n  abc_to_rgb(a, b, c) --> r, g, b\n\nAll inputs and outputs are triples of floats in the range [0.0...1.0]\n(with the exception of I and Q, which covers a slightly larger range).\nInputs outside the valid range may cause exceptions or invalid outputs.\n\nSupported color systems:\nRGB: Red, Green, Blue components\nYIQ: Luminance, Chrominance (used by composite video signals)\nHLS: Hue, Luminance, Saturation\nHSV: Hue, Saturation, Value\n"}}, {"pk": 559, "model": "website.keyword", "fields": {"category": 3, "codname": "imghdr", "slug": "imghdr", "description": "Recognize image file formats based on their first few bytes."}}, {"pk": 560, "model": "website.keyword", "fields": {"category": 3, "codname": "sndhdr", "slug": "sndhdr", "description": "Routines to help recognizing sound files.\n\nFunction whathdr() recognizes various types of sound file headers.\nIt understands almost all headers that SOX can decode.\n\nThe return tuple contains the following items, in this order:\n- file type (as SOX understands it)\n- sampling rate (0 if unknown or hard to decode)\n- number of channels (0 if unknown or hard to decode)\n- number of frames in the file (-1 if unknown or hard to decode)\n- number of bits/sample, or 'U' for U-LAW, or 'A' for A-LAW\n\nIf the file doesn't have a recognizable type, it returns None.\nIf the file can't be opened, IOError is raised.\n\nTo compute the total time, divide the number of frames by the\nsampling rate (a frame contains a sample for each channel).\n\nFunction what() calls whathdr().  (It used to also use some\nheuristics for raw data, but this doesn't work very well.)\n\nFinally, the function test() is a simple main program that calls\nwhat() for all files mentioned on the argument list.  For directory\narguments it calls what() for all files in that directory.  Default\nargument is \".\" (testing all files in the current directory).  The\noption -r tells it to recurse down directories found inside\nexplicitly given directories.\n"}}, {"pk": 561, "model": "website.keyword", "fields": {"category": 3, "codname": "ossaudiodev", "slug": "ossaudiodev", "description": ""}}, {"pk": 562, "model": "website.keyword", "fields": {"category": 3, "codname": "gettext", "slug": "gettext", "description": "Internationalization and localization support.\n\nThis module provides internationalization (I18N) and localization (L10N)\nsupport for your Python programs by providing an interface to the GNU gettext\nmessage catalog library.\n\nI18N refers to the operation by which a program is made aware of multiple\nlanguages.  L10N refers to the adaptation of your program, once\ninternationalized, to the local language and cultural habits.\n\n"}}, {"pk": 563, "model": "website.keyword", "fields": {"category": 3, "codname": "locale", "slug": "locale", "description": " Locale support.\n\n    The module provides low-level access to the C lib's locale APIs\n    and adds high level number formatting APIs as well as a locale\n    aliasing engine to complement these.\n\n    The aliasing engine includes support for many commonly used locale\n    names and maps them to values suitable for passing to the C lib's\n    setlocale() function. It also includes default encodings for all\n    supported locale names.\n\n"}}, {"pk": 564, "model": "website.keyword", "fields": {"category": 3, "codname": "cmd", "slug": "cmd", "description": "A generic class to build line-oriented command interpreters.\n\nInterpreters constructed with this class obey the following conventions:\n\n1. End of file on input is processed as the command 'EOF'.\n2. A command is parsed out of each line by collecting the prefix composed\n   of characters in the identchars member.\n3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method\n   is passed a single argument consisting of the remainder of the line.\n4. Typing an empty line repeats the last command.  (Actually, it calls the\n   method `emptyline', which may be overridden in a subclass.)\n5. There is a predefined `help' method.  Given an argument `topic', it\n   calls the command `help_topic'.  With no arguments, it lists all topics\n   with defined help_ functions, broken into up to three topics; documented\n   commands, miscellaneous help topics, and undocumented commands.\n6. The command '?' is a synonym for `help'.  The command '!' is a synonym\n   for `shell', if a do_shell method exists.\n7. If completion is enabled, completing commands will be done automatically,\n   and completing of commands args is done by calling complete_foo() with\n   arguments text, line, begidx, endidx.  text is string we are matching\n   against, all returned matches must begin with it.  line is the current\n   input line (lstripped), begidx and endidx are the beginning and end\n   indexes of the text being matched, which could be used to provide\n   different completion depending upon which position the argument is in.\n\nThe `default' method may be overridden to intercept commands for which there\nis no do_ method.\n\nThe `completedefault' method may be overridden to intercept completions for\ncommands that have no complete_ method.\n\nThe data member `self.ruler' sets the character used to draw separator lines\nin the help messages.  If empty, no ruler line is drawn.  It defaults to \"=\".\n\nIf the value of `self.intro' is nonempty when the cmdloop method is called,\nit is printed out on interpreter startup.  This value may be overridden\nvia an optional argument to the cmdloop() method.\n\nThe data members `self.doc_header', `self.misc_header', and\n`self.undoc_header' set the headers used for the help function's\nlistings of documented functions, miscellaneous topics, and undocumented\nfunctions respectively.\n\nThese interpreters use raw_input; thus, if the readline module is loaded,\nthey automatically support Emacs-like command history and editing features.\n"}}, {"pk": 565, "model": "website.keyword", "fields": {"category": 3, "codname": "shlex", "slug": "shlex", "description": "A lexical analyzer class for simple shell-like syntaxes."}}, {"pk": 566, "model": "website.keyword", "fields": {"category": 3, "codname": "ttk", "slug": "ttk", "description": "Ttk wrapper.\n\nThis module provides classes to allow using Tk themed widget set.\n\nTtk is based on a revised and enhanced version of\nTIP #48 (http://tip.tcl.tk/48) specified style engine.\n\nIts basic idea is to separate, to the extent possible, the code\nimplementing a widget's behavior from the code implementing its\nappearance. Widget class bindings are primarily responsible for\nmaintaining the widget state and invoking callbacks, all aspects\nof the widgets appearance lies at Themes.\n"}}, {"pk": 567, "model": "website.keyword", "fields": {"category": 3, "codname": "turtle", "slug": "turtle", "description": "\nTurtle graphics is a popular way for introducing programming to\nkids. It was part of the original Logo programming language developed\nby Wally Feurzig and Seymour Papert in 1966.\n\nImagine a robotic turtle starting at (0, 0) in the x-y plane. After an ``import turtle``, give it\nthe command turtle.forward(15), and it moves (on-screen!) 15 pixels in\nthe direction it is facing, drawing a line as it moves. Give it the\ncommand turtle.right(25), and it rotates in-place 25 degrees clockwise.\n\nBy combining together these and similar commands, intricate shapes and\npictures can easily be drawn.\n\n----- turtle.py\n\nThis module is an extended reimplementation of turtle.py from the\nPython standard distribution up to Python 2.5. (See: http://www.python.org)\n\nIt tries to keep the merits of turtle.py and to be (nearly) 100%\ncompatible with it. This means in the first place to enable the\nlearning programmer to use all the commands, classes and methods\ninteractively when using the module from within IDLE run with\nthe -n switch.\n\nRoughly it has the following features added:\n\n- Better animation of the turtle movements, especially of turning the\n  turtle. So the turtles can more easily be used as a visual feedback\n  instrument by the (beginning) programmer.\n\n- Different turtle shapes, gif-images as turtle shapes, user defined\n  and user controllable turtle shapes, among them compound\n  (multicolored) shapes. Turtle shapes can be stretched and tilted, which\n  makes turtles very versatile geometrical objects.\n\n- Fine control over turtle movement and screen updates via delay(),\n  and enhanced tracer() and speed() methods.\n\n- Aliases for the most commonly used commands, like fd for forward etc.,\n  following the early Logo traditions. This reduces the boring work of\n  typing long sequences of commands, which often occur in a natural way\n  when kids try to program fancy pictures on their first encounter with\n  turtle graphics.\n\n- Turtles now have an undo()-method with configurable undo-buffer.\n\n- Some simple commands/methods for creating event driven programs\n  (mouse-, key-, timer-events). Especially useful for programming games.\n\n- A scrollable Canvas class. The default scrollable Canvas can be\n  extended interactively as needed while playing around with the turtle(s).\n\n- A TurtleScreen class with methods controlling background color or\n  background image, window and canvas size and other properties of the\n  TurtleScreen.\n\n- There is a method, setworldcoordinates(), to install a user defined\n  coordinate-system for the TurtleScreen.\n\n- The implementation uses a 2-vector class named Vec2D, derived from tuple.\n  This class is public, so it can be imported by the application programmer,\n  which makes certain types of computations very natural and compact.\n\n- Appearance of the TurtleScreen and the Turtles at startup/import can be\n  configured by means of a turtle.cfg configuration file.\n  The default configuration mimics the appearance of the old turtle module.\n\n- If configured appropriately the module reads in docstrings from a docstring\n  dictionary in some different language, supplied separately  and replaces\n  the English ones by those read in. There is a utility function\n  write_docstringdict() to write a dictionary with the original (English)\n  docstrings to disc, so it can serve as a template for translations.\n\nBehind the scenes there are some features included with possible\nextensions in mind. These will be commented and documented elsewhere.\n\n"}}, {"pk": 568, "model": "website.keyword", "fields": {"category": 3, "codname": "pydoc", "slug": "pydoc", "description": "Generate Python documentation in HTML or text for interactive use.\n\nIn the Python interpreter, do \"from pydoc import help\" to provide online\nhelp.  Calling help(thing) on a Python object documents the object.\n\nOr, at the shell command line outside of Python:\n\nRun \"pydoc <name>\" to show documentation on something.  <name> may be\nthe name of a function, module, package, or a dotted reference to a\nclass or function within a module or module in a package.  If the\nargument contains a path segment delimiter (e.g. slash on Unix,\nbackslash on Windows) it is treated as the path to a Python source file.\n\nRun \"pydoc -k <keyword>\" to search for a keyword in the synopsis lines\nof all available modules.\n\nRun \"pydoc -p <port>\" to start an HTTP server on a given port on the\nlocal machine to generate documentation web pages.\n\nFor platforms without a command line, \"pydoc -g\" starts the HTTP server\nand also pops up a little window for controlling it.\n\nRun \"pydoc -w <name>\" to write out the HTML documentation for a module\nto a file named \"<name>.html\".\n\nModule docs for core modules are assumed to be in\n\n    http://docs.python.org/library/\n\nThis can be overridden by setting the PYTHONDOCS environment variable\nto a different URL or to a local directory containing the Library\nReference Manual pages.\n"}}, {"pk": 569, "model": "website.keyword", "fields": {"category": 3, "codname": "doctest", "slug": "doctest", "description": "Module doctest -- a framework for running examples in docstrings.\n\nIn simplest use, end each module M to be tested with:\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    _test()\n\nThen running the module as a script will cause the examples in the\ndocstrings to get executed and verified:\n\npython M.py\n\nThis won't display anything unless an example fails, in which case the\nfailing example(s) and the cause(s) of the failure(s) are printed to stdout\n(why not stderr? because stderr is a lame hack <0.2 wink>), and the final\nline of output is \"Test failed.\".\n\nRun it with the -v switch instead:\n\npython M.py -v\n\nand a detailed report of all examples tried is printed to stdout, along\nwith assorted summaries at the end.\n\nYou can force verbose mode by passing \"verbose=True\" to testmod, or prohibit\nit by passing \"verbose=False\".  In either of those cases, sys.argv is not\nexamined by testmod.\n\nThere are a variety of other ways to run doctests, including integration\nwith the unittest framework, and support for running non-Python text\nfiles containing doctests.  There are also many ways to override parts\nof doctest's default behaviors.  See the Library Reference Manual for\ndetails.\n"}}, {"pk": 570, "model": "website.keyword", "fields": {"category": 3, "codname": "unittest", "slug": "unittest", "description": "\nPython unit testing framework, based on Erich Gamma's JUnit and Kent Beck's\nSmalltalk testing framework.\n\nThis module contains the core framework classes that form the basis of\nspecific test cases and suites (TestCase, TestSuite etc.), and also a\ntext-based utility class for running the tests and reporting the results\n (TextTestRunner).\n\nSimple usage:\n\n    import unittest\n\n    class IntegerArithmenticTestCase(unittest.TestCase):\n        def testAdd(self):  ## test method names begin 'test*'\n            self.assertEqual((1 + 2), 3)\n            self.assertEqual(0 + 1, 1)\n        def testMultiply(self):\n            self.assertEqual((0 * 10), 0)\n            self.assertEqual((5 * 8), 40)\n\n    if __name__ == '__main__':\n        unittest.main()\n\nFurther information is available in the bundled documentation, and from\n\n  http://docs.python.org/library/unittest.html\n\nCopyright (c) 1999-2003 Steve Purcell\nCopyright (c) 2003-2010 Python Software Foundation\nThis module is free software, and you may redistribute it and/or modify\nit under the same terms as Python itself, so long as this copyright message\nand disclaimer are retained in their original form.\n\nIN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\nSPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF\nTHIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\nTHE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS,\nAND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,\nSUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n"}}, {"pk": 571, "model": "website.keyword", "fields": {"category": 3, "codname": "test", "slug": "test", "description": ""}}, {"pk": 572, "model": "website.keyword", "fields": {"category": 3, "codname": "bdb", "slug": "bdb", "description": "Debugger basics"}}, {"pk": 573, "model": "website.keyword", "fields": {"category": 3, "codname": "pdb", "slug": "pdb", "description": "A Python debugger."}}, {"pk": 574, "model": "website.keyword", "fields": {"category": 3, "codname": "profile", "slug": "profile", "description": "Class for profiling Python code."}}, {"pk": 575, "model": "website.keyword", "fields": {"category": 3, "codname": "hotshot", "slug": "hotshot", "description": "High-perfomance logging profiler, mostly written in C."}}, {"pk": 576, "model": "website.keyword", "fields": {"category": 3, "codname": "timeit", "slug": "timeit", "description": "Tool for measuring execution time of small code snippets.\n\nThis module avoids a number of common traps for measuring execution\ntimes.  See also Tim Peters' introduction to the Algorithms chapter in\nthe Python Cookbook, published by O'Reilly.\n\nLibrary usage: see the Timer class.\n\nCommand line usage:\n    python timeit.py [-n N] [-r N] [-s S] [-t] [-c] [-h] [--] [statement]\n\nOptions:\n  -n/--number N: how many times to execute 'statement' (default: see below)\n  -r/--repeat N: how many times to repeat the timer (default 3)\n  -s/--setup S: statement to be executed once initially (default 'pass')\n  -t/--time: use time.time() (default on Unix)\n  -c/--clock: use time.clock() (default on Windows)\n  -v/--verbose: print raw timing results; repeat for more digits precision\n  -h/--help: print this usage message and exit\n  --: separate options from statement, use when statement starts with -\n  statement: statement to be timed (default 'pass')\n\nA multi-line statement may be given by specifying each line as a\nseparate argument; indented lines are possible by enclosing an\nargument in quotes and using leading spaces.  Multiple -s options are\ntreated similarly.\n\nIf -n is not given, a suitable number of loops is calculated by trying\nsuccessive powers of 10 until the total time is at least 0.2 seconds.\n\nThe difference in default timer function is because on Windows,\nclock() has microsecond granularity but time()'s granularity is 1/60th\nof a second; on Unix, clock() has 1/100th of a second granularity and\ntime() is much more precise.  On either platform, the default timer\nfunctions measure wall clock time, not the CPU time.  This means that\nother processes running on the same computer may interfere with the\ntiming.  The best thing to do when accurate timing is necessary is to\nrepeat the timing a few times and use the best time.  The -r option is\ngood for this; the default of 3 repetitions is probably enough in most\ncases.  On Unix, you can use clock() to measure CPU time.\n\nNote: there is a certain baseline overhead associated with executing a\npass statement.  The code here doesn't try to hide it, but you should\nbe aware of it.  The baseline overhead can be measured by invoking the\nprogram without arguments.\n\nThe baseline overhead differs between Python versions!  Also, to\nfairly compare older Python versions to Python 2.3, you may want to\nuse python -O for the older versions to avoid timing SET_LINENO\ninstructions.\n"}}, {"pk": 577, "model": "website.keyword", "fields": {"category": 3, "codname": "trace", "slug": "trace", "description": "program/module to trace Python program or function execution\n\nSample use, command line:\n  trace.py -c -f counts --ignore-dir '$prefix' spam.py eggs\n  trace.py -t --ignore-dir '$prefix' spam.py eggs\n  trace.py --trackcalls spam.py eggs\n\nSample use, programmatically\n  import sys\n\n  # create a Trace object, telling it what to ignore, and whether to\n  # do tracing or line-counting or both.\n  tracer = trace.Trace(ignoredirs=[sys.prefix, sys.exec_prefix,], trace=0,\n                    count=1)\n  # run the new command using the given tracer\n  tracer.run('main()')\n  # make a report, placing output in /tmp\n  r = tracer.results()\n  r.write_results(show_missing=True, coverdir=\"/tmp\")\n"}}, {"pk": 578, "model": "website.keyword", "fields": {"category": 3, "codname": "sys", "slug": "sys", "description": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nexitfunc -- if sys.exitfunc exists, this routine is called when Python exits\n  Assigning to sys.exitfunc is deprecated; use the atexit module instead.\n\nstdin -- standard input file object; used by raw_input() and input()\nstdout -- standard output file object; used by the print statement\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nexc_type -- type of exception currently being handled\nexc_value -- value of exception currently being handled\nexc_traceback -- traceback of exception currently being handled\n  The function exc_info() should be used instead of these three,\n  because it is thread-safe.\n\nStatic objects:\n\nfloat_info -- a dict with information about the float inplementation.\nlong_info -- a struct sequence with information about the long implementation.\nmaxint -- the largest supported integer (the smallest is -maxint-1)\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the largest supported character\nbuiltin_module_names -- tuple of module names built into this interpreter\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\nhexversion -- version information encoded as a single integer\ncopyright -- copyright notice pertaining to this interpreter\nplatform -- platform identifier\nexecutable -- absolute path of the executable binary of the Python interpreter\nprefix -- prefix used to find the Python library\nexec_prefix -- prefix used to find the machine-specific Python library\nfloat_repr_style -- string indicating the style of repr() output for floats\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in __builtin__._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexc_clear() -- clear the exception state for the current thread\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function\n"}}, {"pk": 579, "model": "website.keyword", "fields": {"category": 3, "codname": "sysconfig", "slug": "sysconfig", "description": "Provide access to Python's configuration information.\n\n"}}, {"pk": 580, "model": "website.keyword", "fields": {"category": 3, "codname": "__builtin__", "slug": "__builtin__", "description": "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices."}}, {"pk": 581, "model": "website.keyword", "fields": {"category": 3, "codname": "future_builtins", "slug": "future_builtins", "description": "This module provides functions that will be builtins in Python 3.0,\nbut that conflict with builtins that already exist in Python 2.x.\n\nFunctions:\n\nascii(arg) -- Returns the canonical string representation of an object.\nfilter(pred, iterable) -- Returns an iterator yielding those items of \n       iterable for which pred(item) is true.\nhex(arg) -- Returns the hexadecimal representation of an integer.\nmap(func, *iterables) -- Returns an iterator that computes the function \n    using arguments from each of the iterables.\noct(arg) -- Returns the octal representation of an integer.\nzip(iter1 [,iter2 [...]]) -- Returns a zip object whose .next() method \n    returns a tuple where the i-th element comes from the i-th iterable \n    argument.\n\nThe typical usage of this module is to replace existing builtins in a\nmodule's namespace:\n \nfrom future_builtins import ascii, filter, map, hex, oct, zip\n"}}, {"pk": 582, "model": "website.keyword", "fields": {"category": 3, "codname": "__main__", "slug": "__main__", "description": ""}}, {"pk": 583, "model": "website.keyword", "fields": {"category": 3, "codname": "warnings", "slug": "warnings", "description": "Python part of the warnings subsystem."}}, {"pk": 584, "model": "website.keyword", "fields": {"category": 3, "codname": "contextlib", "slug": "contextlib", "description": "Utilities for with-statement contexts.  See PEP 343."}}, {"pk": 585, "model": "website.keyword", "fields": {"category": 3, "codname": "abc", "slug": "abc", "description": "Abstract Base Classes (ABCs) according to PEP 3119."}}, {"pk": 586, "model": "website.keyword", "fields": {"category": 3, "codname": "atexit", "slug": "atexit", "description": "\natexit.py - allow programmer to define multiple exit functions to be executed\nupon normal program termination.\n\nOne public function, register, is defined.\n"}}, {"pk": 587, "model": "website.keyword", "fields": {"category": 3, "codname": "traceback", "slug": "traceback", "description": "Extract, format and print information about Python stack traces."}}, {"pk": 588, "model": "website.keyword", "fields": {"category": 3, "codname": "__future__", "slug": "__future__", "description": "Record of phased-in incompatible language changes.\n\nEach line is of the form:\n\n    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"\n                              CompilerFlag \")\"\n\nwhere, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples\nof the same form as sys.version_info:\n\n    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int\n     PY_MINOR_VERSION, # the 1; an int\n     PY_MICRO_VERSION, # the 0; an int\n     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string\n     PY_RELEASE_SERIAL # the 3; an int\n    )\n\nOptionalRelease records the first release in which\n\n    from __future__ import FeatureName\n\nwas accepted.\n\nIn the case of MandatoryReleases that have not yet occurred,\nMandatoryRelease predicts the release in which the feature will become part\nof the language.\n\nElse MandatoryRelease records when the feature became part of the language;\nin releases at or after that, modules no longer need\n\n    from __future__ import FeatureName\n\nto use the feature in question, but may continue to use such imports.\n\nMandatoryRelease may also be None, meaning that a planned feature got\ndropped.\n\nInstances of class _Feature have two corresponding methods,\n.getOptionalRelease() and .getMandatoryRelease().\n\nCompilerFlag is the (bitfield) flag that should be passed in the fourth\nargument to the builtin function compile() to enable the feature in\ndynamically compiled code.  This flag is stored in the .compiler_flag\nattribute on _Future instances.  These values must match the appropriate\n#defines of CO_xxx flags in Include/compile.h.\n\nNo feature line is ever to be deleted from this file.\n"}}, {"pk": 589, "model": "website.keyword", "fields": {"category": 3, "codname": "gc", "slug": "gc", "description": "This module provides access to the garbage collector for reference cycles.\n\nenable() -- Enable automatic garbage collection.\ndisable() -- Disable automatic garbage collection.\nisenabled() -- Returns true if automatic collection is enabled.\ncollect() -- Do a full collection right now.\nget_count() -- Return the current collection counts.\nset_debug() -- Set debugging flags.\nget_debug() -- Get debugging flags.\nset_threshold() -- Set the collection thresholds.\nget_threshold() -- Return the current the collection thresholds.\nget_objects() -- Return a list of all objects tracked by the collector.\nis_tracked() -- Returns true if a given object is tracked.\nget_referrers() -- Return the list of objects that refer to an object.\nget_referents() -- Return the list of objects that an object refers to.\n"}}, {"pk": 590, "model": "website.keyword", "fields": {"category": 3, "codname": "inspect", "slug": "inspect", "description": "Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (func_*, co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargspec(), getargvalues(), getcallargs() - get info about function arguments\n    formatargspec(), formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n"}}, {"pk": 591, "model": "website.keyword", "fields": {"category": 3, "codname": "site", "slug": "site", "description": "Append module search paths for third-party packages to sys.path.\n\n****************************************************************\n* This module is automatically imported during initialization. *\n****************************************************************\n\nIn earlier versions of Python (up to 1.5a3), scripts or modules that\nneeded to use site-specific modules would place ``import site''\nsomewhere near the top of their code.  Because of the automatic\nimport, this is no longer necessary (but code that does it still\nworks).\n\nThis will append site-specific paths to the module search path.  On\nUnix, it starts with sys.prefix and sys.exec_prefix (if different) and\nappends lib/python<version>/site-packages as well as lib/site-python.\nIt also supports the Debian convention of\nlib/python<version>/dist-packages.  On other platforms (mainly Mac and\nWindows), it uses just sys.prefix (and sys.exec_prefix, if different,\nbut this is unlikely).  The resulting directories, if they exist, are\nappended to sys.path, and also inspected for path configuration files.\n\nFOR DEBIAN, this sys.path is augmented with directories in /usr/local.\nLocal addons go into /usr/local/lib/python<version>/site-packages\n(resp. /usr/local/lib/site-python), Debian addons install into\n/usr/{lib,share}/python<version>/dist-packages.\n\nA path configuration file is a file whose name has the form\n<package>.pth; its contents are additional directories (one per line)\nto be added to sys.path.  Non-existing directories (or\nnon-directories) are never added to sys.path; no directory is added to\nsys.path more than once.  Blank lines and lines beginning with\n'#' are skipped. Lines starting with 'import' are executed.\n\nFor example, suppose sys.prefix and sys.exec_prefix are set to\n/usr/local and there is a directory /usr/local/lib/python2.X/site-packages\nwith three subdirectories, foo, bar and spam, and two path\nconfiguration files, foo.pth and bar.pth.  Assume foo.pth contains the\nfollowing:\n\n  # foo package configuration\n  foo\n  bar\n  bletch\n\nand bar.pth contains:\n\n  # bar package configuration\n  bar\n\nThen the following directories are added to sys.path, in this order:\n\n  /usr/local/lib/python2.X/site-packages/bar\n  /usr/local/lib/python2.X/site-packages/foo\n\nNote that bletch is omitted because it doesn't exist; bar precedes foo\nbecause bar.pth comes alphabetically before foo.pth; and spam is\nomitted because it is not mentioned in either path configuration file.\n\nAfter these path manipulations, an attempt is made to import a module\nnamed sitecustomize, which can perform arbitrary additional\nsite-specific customizations.  If this import fails with an\nImportError exception, it is silently ignored.\n\n"}}, {"pk": 592, "model": "website.keyword", "fields": {"category": 3, "codname": "user", "slug": "user", "description": "Hook to allow user-specified customization code to run.\n\nAs a policy, Python doesn't run user-specified code on startup of\nPython programs (interactive sessions execute the script specified in\nthe PYTHONSTARTUP environment variable if it exists).\n\nHowever, some programs or sites may find it convenient to allow users\nto have a standard customization file, which gets run when a program\nrequests it.  This module implements such a mechanism.  A program\nthat wishes to use the mechanism must execute the statement\n\n    import user\n\nThe user module looks for a file .pythonrc.py in the user's home\ndirectory and if it can be opened, execfile()s it in its own global\nnamespace.  Errors during this phase are not caught; that's up to the\nprogram that imports the user module, if it wishes.\n\nThe user's .pythonrc.py could conceivably test for sys.version if it\nwishes to do different things depending on the Python version.\n\n"}}, {"pk": 593, "model": "website.keyword", "fields": {"category": 3, "codname": "fpectl", "slug": "fpectl", "description": ""}}, {"pk": 594, "model": "website.keyword", "fields": {"category": 3, "codname": "distutils", "slug": "distutils", "description": ""}}, {"pk": 595, "model": "website.keyword", "fields": {"category": 3, "codname": "code", "slug": "code", "description": "Utilities needed to emulate Python's interactive interpreter.\n\n"}}, {"pk": 596, "model": "website.keyword", "fields": {"category": 3, "codname": "codeop", "slug": "codeop", "description": "Utilities to compile possibly incomplete Python source code.\n\nThis module provides two interfaces, broadly similar to the builtin\nfunction compile(), which take program text, a filename and a 'mode'\nand:\n\n- Return code object if the command is complete and valid\n- Return None if the command is incomplete\n- Raise SyntaxError, ValueError or OverflowError if the command is a\n  syntax error (OverflowError and ValueError can be produced by\n  malformed literals).\n\nApproach:\n\nFirst, check if the source consists entirely of blank lines and\ncomments; if so, replace it with 'pass', because the built-in\nparser doesn't always do the right thing for these.\n\nCompile three times: as is, with \\n, and with \\n\\n appended.  If it\ncompiles as is, it's complete.  If it compiles with one \\n appended,\nwe expect more.  If it doesn't compile either way, we compare the\nerror we get when compiling with \\n or \\n\\n appended.  If the errors\nare the same, the code is broken.  But if the errors are different, we\nexpect more.  Not intuitive; not even guaranteed to hold in future\nreleases; but this matches the compiler's behavior from Python 1.4\nthrough 2.2, at least.\n\nCaveat:\n\nIt is possible (but not likely) that the parser stops parsing with a\nsuccessful outcome before reaching the end of the source; in this\ncase, trailing symbols may be ignored instead of causing an error.\nFor example, a backslash followed by two newlines may be followed by\narbitrary garbage.  This will be fixed once the API for the parser is\nbetter.\n\nThe two interfaces are:\n\ncompile_command(source, filename, symbol):\n\n    Compiles a single command in the manner described above.\n\nCommandCompiler():\n\n    Instances of this class have __call__ methods identical in\n    signature to compile_command; the difference is that if the\n    instance compiles program text containing a __future__ statement,\n    the instance 'remembers' and compiles all subsequent program texts\n    with the statement in force.\n\nThe module also provides another class:\n\nCompile():\n\n    Instances of this class act like the built-in function compile,\n    but with 'memory' in the sense described above.\n"}}, {"pk": 597, "model": "website.keyword", "fields": {"category": 3, "codname": "rexec", "slug": "rexec", "description": "Restricted execution facilities.\n\nThe class RExec exports methods r_exec(), r_eval(), r_execfile(), and\nr_import(), which correspond roughly to the built-in operations\nexec, eval(), execfile() and import, but executing the code in an\nenvironment that only exposes those built-in operations that are\ndeemed safe.  To this end, a modest collection of 'fake' modules is\ncreated which mimics the standard modules by the same names.  It is a\npolicy decision which built-in modules and operations are made\navailable; this module provides a reasonable default, but derived\nclasses can change the policies e.g. by overriding or extending class\nvariables like ok_builtin_modules or methods like make_sys().\n\nXXX To do:\n- r_open should allow writing tmp dir\n- r_exec etc. with explicit globals/locals? (Use rexec(\"exec ... in ...\")?)\n\n"}}, {"pk": 598, "model": "website.keyword", "fields": {"category": 3, "codname": "imp", "slug": "imp", "description": "This module provides the components needed to build your own\n__import__ function.  Undocumented functions are obsolete."}}, {"pk": 599, "model": "website.keyword", "fields": {"category": 3, "codname": "importlib", "slug": "importlib", "description": "Backport of importlib.import_module from 3.x."}}, {"pk": 600, "model": "website.keyword", "fields": {"category": 3, "codname": "imputil", "slug": "imputil", "description": "\nImport utilities\n\nExported classes:\n    ImportManager   Manage the import process\n\n    Importer        Base class for replacing standard import functions\n    BuiltinImporter Emulate the import mechanism for builtin and frozen modules\n\n    DynLoadSuffixImporter\n"}}, {"pk": 601, "model": "website.keyword", "fields": {"category": 3, "codname": "zipimport", "slug": "zipimport", "description": "zipimport provides support for importing Python modules from Zip archives.\n\nThis module exports three objects:\n- zipimporter: a class; its constructor takes a path to a Zip archive.\n- ZipImportError: exception raised by zipimporter objects. It's a\n  subclass of ImportError, so it can be caught as ImportError, too.\n- _zip_directory_cache: a dict, mapping archive paths to zip directory\n  info dicts, as used in zipimporter._files.\n\nIt is usually not needed to use the zipimport module explicitly; it is\nused by the builtin import mechanism for sys.path items that are paths\nto Zip archives."}}, {"pk": 602, "model": "website.keyword", "fields": {"category": 3, "codname": "pkgutil", "slug": "pkgutil", "description": "Utilities to support packages."}}, {"pk": 603, "model": "website.keyword", "fields": {"category": 3, "codname": "modulefinder", "slug": "modulefinder", "description": "Find modules used by a script, using introspection."}}, {"pk": 604, "model": "website.keyword", "fields": {"category": 3, "codname": "runpy", "slug": "runpy", "description": "runpy.py - locating and running Python code using the module namespace\n\nProvides support for locating and running Python scripts using the Python\nmodule namespace instead of the native filesystem.\n\nThis allows Python code to play nicely with non-filesystem based PEP 302\nimporters when locating support scripts as well as when importing modules.\n"}}, {"pk": 605, "model": "website.keyword", "fields": {"category": 3, "codname": "parser", "slug": "parser", "description": "This is an interface to Python's internal parser."}}, {"pk": 606, "model": "website.keyword", "fields": {"category": 3, "codname": "ast", "slug": "ast", "description": "\n    ast\n    ~~~\n\n    The `ast` module helps Python applications to process trees of the Python\n    abstract syntax grammar.  The abstract syntax itself might change with\n    each Python release; this module helps to find out programmatically what\n    the current grammar looks like and allows modifications of it.\n\n    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as\n    a flag to the `compile()` builtin function or by using the `parse()`\n    function from this module.  The result will be a tree of objects whose\n    classes all inherit from `ast.AST`.\n\n    A modified abstract syntax tree can be compiled into a Python code object\n    using the built-in `compile()` function.\n\n    Additionally various helper functions are provided that make working with\n    the trees simpler.  The main intention of the helper functions and this\n    module in general is to provide an easy to use interface for libraries\n    that work tightly with the python syntax (template engines for example).\n\n\n    :copyright: Copyright 2008 by Armin Ronacher.\n    :license: Python License.\n"}}, {"pk": 607, "model": "website.keyword", "fields": {"category": 3, "codname": "symtable", "slug": "symtable", "description": "Interface to the compiler's internal symbol tables"}}, {"pk": 608, "model": "website.keyword", "fields": {"category": 3, "codname": "symbol", "slug": "symbol", "description": "Non-terminal symbols of Python grammar (from \"graminit.h\")."}}, {"pk": 609, "model": "website.keyword", "fields": {"category": 3, "codname": "token", "slug": "token", "description": "Token constants (from \"token.h\")."}}, {"pk": 610, "model": "website.keyword", "fields": {"category": 3, "codname": "keyword", "slug": "keyword", "description": "Keywords (from \"graminit.c\")\n\nThis file is automatically generated; please don't muck it up!\n\nTo update the symbols in this file, 'cd' to the top directory of\nthe python source tree after building the interpreter and run:\n\n    ./python Lib/keyword.py\n"}}, {"pk": 611, "model": "website.keyword", "fields": {"category": 3, "codname": "tokenize", "slug": "tokenize", "description": "Tokenization help for Python programs.\n\ngenerate_tokens(readline) is a generator that breaks a stream of\ntext into Python tokens.  It accepts a readline-like method which is called\nrepeatedly to get the next line of input (or \"\" for EOF).  It generates\n5-tuples with these members:\n\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\n\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators\n\nOlder entry points\n    tokenize_loop(readline, tokeneater)\n    tokenize(readline, tokeneater=printtoken)\nare the same, except instead of generating tokens, tokeneater is a callback\nfunction to which the 5 fields described above are passed as 5 arguments,\neach time a new token is found."}}, {"pk": 612, "model": "website.keyword", "fields": {"category": 3, "codname": "tabnanny", "slug": "tabnanny", "description": "The Tab Nanny despises ambiguous indentation.  She knows no mercy.\n\ntabnanny -- Detection of ambiguous indentation\n\nFor the time being this module is intended to be called as a script.\nHowever it is possible to import it into an IDE and use the function\ncheck() described below.\n\nWarning: The API provided by this module is likely to change in future\nreleases; such changes may not be backward compatible.\n"}}, {"pk": 613, "model": "website.keyword", "fields": {"category": 3, "codname": "pyclbr", "slug": "pyclbr", "description": "Parse a Python module and describe its classes and methods.\n\nParse enough of a Python file to recognize imports and class and\nmethod definitions, and to find out the superclasses of a class.\n\nThe interface consists of a single function:\n        readmodule_ex(module [, path])\nwhere module is the name of a Python module, and path is an optional\nlist of directories where the module is to be searched.  If present,\npath is prepended to the system search path sys.path.  The return\nvalue is a dictionary.  The keys of the dictionary are the names of\nthe classes defined in the module (including classes that are defined\nvia the from XXX import YYY construct).  The values are class\ninstances of the class Class defined here.  One special key/value pair\nis present for packages: the key '__path__' has a list as its value\nwhich contains the package search path.\n\nA class is described by the class Class in this module.  Instances\nof this class have the following instance variables:\n        module -- the module name\n        name -- the name of the class\n        super -- a list of super classes (Class instances)\n        methods -- a dictionary of methods\n        file -- the file in which the class was defined\n        lineno -- the line in the file on which the class statement occurred\nThe dictionary of methods uses the method names as keys and the line\nnumbers on which the method was defined as values.\nIf the name of a super class is not recognized, the corresponding\nentry in the list of super classes is not a class instance but a\nstring giving the name of the super class.  Since import statements\nare recognized and imported modules are scanned as well, this\nshouldn't happen often.\n\nA function is described by the class Function in this module.\nInstances of this class have the following instance variables:\n        module -- the module name\n        name -- the name of the class\n        file -- the file in which the class was defined\n        lineno -- the line in the file on which the class statement occurred\n"}}, {"pk": 614, "model": "website.keyword", "fields": {"category": 3, "codname": "py_compile", "slug": "py_compile", "description": "Routine to \"compile\" a .py file to a .pyc (or .pyo) file.\n\nThis module has intimate knowledge of the format of .pyc files.\n"}}, {"pk": 615, "model": "website.keyword", "fields": {"category": 3, "codname": "compileall", "slug": "compileall", "description": "Module/script to byte-compile all .py files to .pyc (or .pyo) files.\n\nWhen called as a script with arguments, this compiles the directories\ngiven as arguments recursively; the -l option prevents it from\nrecursing into directories.\n\nWithout arguments, if compiles all modules on sys.path, without\nrecursing into subdirectories.  (Even though it should do so for\npackages -- for now, you'll have to deal with packages separately.)\n\nSee module py_compile for details of the actual byte-compilation.\n"}}, {"pk": 616, "model": "website.keyword", "fields": {"category": 3, "codname": "dis", "slug": "dis", "description": "Disassembler of Python byte code into mnemonics."}}, {"pk": 617, "model": "website.keyword", "fields": {"category": 3, "codname": "pickletools", "slug": "pickletools", "description": "\"Executable documentation\" for the pickle module.\n\nExtensive comments about the pickle protocols and pickle-machine opcodes\ncan be found here.  Some functions meant for external use:\n\ngenops(pickle)\n   Generate all the opcodes in a pickle, as (opcode, arg, position) triples.\n\ndis(pickle, out=None, memo=None, indentlevel=4)\n   Print a symbolic disassembly of a pickle.\n"}}, {"pk": 618, "model": "website.keyword", "fields": {"category": 3, "codname": "formatter", "slug": "formatter", "description": "Generic output formatting.\n\nFormatter objects transform an abstract flow of formatting events into\nspecific output events on writer objects. Formatters manage several stack\nstructures to allow various properties of a writer object to be changed and\nrestored; writers need not be able to handle relative changes nor any sort\nof ``change back'' operation. Specific writer properties which may be\ncontrolled via formatter objects are horizontal alignment, font, and left\nmargin indentations. A mechanism is provided which supports providing\narbitrary, non-exclusive style settings to a writer as well. Additional\ninterfaces facilitate formatting events which are not reversible, such as\nparagraph separation.\n\nWriter objects encapsulate device interfaces. Abstract devices, such as\nfile formats, are supported as well as physical devices. The provided\nimplementations all work with abstract devices. The interface makes\navailable mechanisms for setting the properties which formatter objects\nmanage and inserting data into the output.\n"}}, {"pk": 619, "model": "website.keyword", "fields": {"category": 3, "codname": "posix", "slug": "posix", "description": "This module provides access to operating system functionality that is\nstandardized by the C Standard and the POSIX standard (a thinly\ndisguised Unix interface).  Refer to the library manual and\ncorresponding Unix manual entries for more information on calls."}}, {"pk": 620, "model": "website.keyword", "fields": {"category": 3, "codname": "pwd", "slug": "pwd", "description": "This module provides access to the Unix password database.\nIt is available on all Unix versions.\n\nPassword database entries are reported as 7-tuples containing the following\nitems from the password database (see `<pwd.h>'), in order:\npw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.\nThe uid and gid items are integers, all others are strings. An\nexception is raised if the entry asked for cannot be found."}}, {"pk": 621, "model": "website.keyword", "fields": {"category": 3, "codname": "spwd", "slug": "spwd", "description": "This module provides access to the Unix shadow password database.\nIt is available on various Unix versions.\n\nShadow password database entries are reported as 9-tuples of type struct_spwd,\ncontaining the following items from the password database (see `<shadow.h>'):\nsp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max, sp_warn, sp_inact, sp_expire, sp_flag.\nThe sp_namp and sp_pwdp are strings, the rest are integers.\nAn exception is raised if the entry asked for cannot be found.\nYou have to be root to be able to use this module."}}, {"pk": 622, "model": "website.keyword", "fields": {"category": 3, "codname": "grp", "slug": "grp", "description": "Access to the Unix group database.\n\nGroup entries are reported as 4-tuples containing the following fields\nfrom the group database, in order:\n\n  name   - name of the group\n  passwd - group password (encrypted); often empty\n  gid    - numeric ID of the group\n  mem    - list of members\n\nThe gid is an integer, name and password are strings.  (Note that most\nusers are not explicitly listed as members of the groups they are in\naccording to the password database.  Check both databases to get\ncomplete membership information.)"}}, {"pk": 623, "model": "website.keyword", "fields": {"category": 3, "codname": "crypt", "slug": "crypt", "description": ""}}, {"pk": 624, "model": "website.keyword", "fields": {"category": 3, "codname": "dl", "slug": "dl", "description": ""}}, {"pk": 625, "model": "website.keyword", "fields": {"category": 3, "codname": "termios", "slug": "termios", "description": "This module provides an interface to the Posix calls for tty I/O control.\nFor a complete description of these calls, see the Posix or Unix manual\npages. It is only available for those Unix versions that support Posix\ntermios style tty I/O control.\n\nAll functions in this module take a file descriptor fd as their first\nargument. This can be an integer file descriptor, such as returned by\nsys.stdin.fileno(), or a file object, such as sys.stdin itself."}}, {"pk": 626, "model": "website.keyword", "fields": {"category": 3, "codname": "tty", "slug": "tty", "description": "Terminal utilities."}}, {"pk": 627, "model": "website.keyword", "fields": {"category": 3, "codname": "pty", "slug": "pty", "description": "Pseudo terminal utilities."}}, {"pk": 628, "model": "website.keyword", "fields": {"category": 3, "codname": "fcntl", "slug": "fcntl", "description": "This module performs file control and I/O control on file \ndescriptors.  It is an interface to the fcntl() and ioctl() Unix\nroutines.  File descriptors can be obtained with the fileno() method of\na file or socket object."}}, {"pk": 629, "model": "website.keyword", "fields": {"category": 3, "codname": "pipes", "slug": "pipes", "description": "Conversion pipeline templates.\n\nThe problem:\n------------\n\nSuppose you have some data that you want to convert to another format,\nsuch as from GIF image format to PPM image format.  Maybe the\nconversion involves several steps (e.g. piping it through compress or\nuuencode).  Some of the conversion steps may require that their input\nis a disk file, others may be able to read standard input; similar for\ntheir output.  The input to the entire conversion may also be read\nfrom a disk file or from an open file, and similar for its output.\n\nThe module lets you construct a pipeline template by sticking one or\nmore conversion steps together.  It will take care of creating and\nremoving temporary files if they are necessary to hold intermediate\ndata.  You can then use the template to do conversions from many\ndifferent sources to many different destinations.  The temporary\nfile names used are different each time the template is used.\n\nThe templates are objects so you can create templates for many\ndifferent conversion steps and store them in a dictionary, for\ninstance.\n\n\nDirections:\n-----------\n\nTo create a template:\n    t = Template()\n\nTo add a conversion step to a template:\n   t.append(command, kind)\nwhere kind is a string of two characters: the first is '-' if the\ncommand reads its standard input or 'f' if it requires a file; the\nsecond likewise for the output. The command must be valid /bin/sh\nsyntax.  If input or output files are required, they are passed as\n$IN and $OUT; otherwise, it must be  possible to use the command in\na pipeline.\n\nTo add a conversion step at the beginning:\n   t.prepend(command, kind)\n\nTo convert a file to another file using a template:\n  sts = t.copy(infile, outfile)\nIf infile or outfile are the empty string, standard input is read or\nstandard output is written, respectively.  The return value is the\nexit status of the conversion pipeline.\n\nTo open a file for reading or writing through a conversion pipeline:\n   fp = t.open(file, mode)\nwhere mode is 'r' to read the file, or 'w' to write it -- just like\nfor the built-in function open() or for os.popen().\n\nTo create a new template object initialized to a given one:\n   t2 = t.clone()\n"}}, {"pk": 630, "model": "website.keyword", "fields": {"category": 3, "codname": "posixfile", "slug": "posixfile", "description": "Extended file operations available in POSIX.\n\nf = posixfile.open(filename, [mode, [bufsize]])\n      will create a new posixfile object\n\nf = posixfile.fileopen(fileobject)\n      will create a posixfile object from a builtin file object\n\nf.file()\n      will return the original builtin file object\n\nf.dup()\n      will return a new file object based on a new filedescriptor\n\nf.dup2(fd)\n      will return a new file object based on the given filedescriptor\n\nf.flags(mode)\n      will turn on the associated flag (merge)\n      mode can contain the following characters:\n\n  (character representing a flag)\n      a       append only flag\n      c       close on exec flag\n      n       no delay flag\n      s       synchronization flag\n  (modifiers)\n      !       turn flags 'off' instead of default 'on'\n      =       copy flags 'as is' instead of default 'merge'\n      ?       return a string in which the characters represent the flags\n              that are set\n\n      note: - the '!' and '=' modifiers are mutually exclusive.\n            - the '?' modifier will return the status of the flags after they\n              have been changed by other characters in the mode string\n\nf.lock(mode [, len [, start [, whence]]])\n      will (un)lock a region\n      mode can contain the following characters:\n\n  (character representing type of lock)\n      u       unlock\n      r       read lock\n      w       write lock\n  (modifiers)\n      |       wait until the lock can be granted\n      ?       return the first lock conflicting with the requested lock\n              or 'None' if there is no conflict. The lock returned is in the\n              format (mode, len, start, whence, pid) where mode is a\n              character representing the type of lock ('r' or 'w')\n\n      note: - the '?' modifier prevents a region from being locked; it is\n              query only\n"}}, {"pk": 631, "model": "website.keyword", "fields": {"category": 3, "codname": "resource", "slug": "resource", "description": ""}}, {"pk": 632, "model": "website.keyword", "fields": {"category": 3, "codname": "nis", "slug": "nis", "description": "This module contains functions for accessing NIS maps.\n"}}, {"pk": 633, "model": "website.keyword", "fields": {"category": 3, "codname": "syslog", "slug": "syslog", "description": ""}}, {"pk": 634, "model": "website.keyword", "fields": {"category": 3, "codname": "commands", "slug": "commands", "description": "Execute shell commands via os.popen() and return status, output.\n\nInterface summary:\n\n       import commands\n\n       outtext = commands.getoutput(cmd)\n       (exitstatus, outtext) = commands.getstatusoutput(cmd)\n       outtext = commands.getstatus(file)  # returns output of \"ls -ld file\"\n\nA trailing newline is removed from the output string.\n\nEncapsulates the basic operation:\n\n      pipe = os.popen('{ ' + cmd + '; } 2>&1', 'r')\n      text = pipe.read()\n      sts = pipe.close()\n\n [Note:  it would be nice to add functions to interpret the exit status.]\n"}}, {"pk": 635, "model": "website.keyword", "fields": {"category": 3, "codname": "sunaudio", "slug": "sunaudio", "description": "Interpret sun audio headers."}}, {"pk": 637, "model": "website.keyword", "fields": {"category": 2, "codname": "bytearray", "slug": "bytearray", "description": "bytearray(iterable_of_ints) -> bytearray.\nbytearray(string, encoding[, errors]) -> bytearray.\nbytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray.\nbytearray(memory_view) -> bytearray.\n\nConstruct an mutable bytearray object from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - a bytes or a bytearray object\n  - any object implementing the buffer API.\n\nbytearray(int) -> bytearray.\n\nConstruct a zero-initialized bytearray of the given length."}}, {"pk": 638, "model": "website.keyword", "fields": {"category": 2, "codname": "IndexError", "slug": "indexerror", "description": "Sequence index out of range."}}, {"pk": 639, "model": "website.keyword", "fields": {"category": 2, "codname": "all", "slug": "all", "description": "all(iterable) -> bool\n\nReturn True if bool(x) is True for all values x in the iterable.\nIf the iterable is empty, return True."}}, {"pk": 640, "model": "website.keyword", "fields": {"category": 2, "codname": "help", "slug": "help", "description": "Define the built-in 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n\n    "}}, {"pk": 641, "model": "website.keyword", "fields": {"category": 2, "codname": "vars", "slug": "vars", "description": "vars([object]) -> dictionary\n\nWithout arguments, equivalent to locals().\nWith an argument, equivalent to object.__dict__."}}, {"pk": 642, "model": "website.keyword", "fields": {"category": 2, "codname": "SyntaxError", "slug": "syntaxerror", "description": "Invalid syntax."}}, {"pk": 643, "model": "website.keyword", "fields": {"category": 2, "codname": "unicode", "slug": "unicode", "description": "unicode(object='') -> unicode object\nunicode(string[, encoding[, errors]]) -> unicode object\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'."}}, {"pk": 644, "model": "website.keyword", "fields": {"category": 2, "codname": "UnicodeDecodeError", "slug": "unicodedecodeerror", "description": "Unicode decoding error."}}, {"pk": 645, "model": "website.keyword", "fields": {"category": 2, "codname": "memoryview", "slug": "memoryview", "description": "memoryview(object)\n\nCreate a new memoryview object which references the given object."}}, {"pk": 646, "model": "website.keyword", "fields": {"category": 2, "codname": "isinstance", "slug": "isinstance", "description": "isinstance(object, class-or-type-or-tuple) -> bool\n\nReturn whether an object is an instance of a class or of a subclass thereof.\nWith a type as second argument, return whether that is the object's type.\nThe form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for\nisinstance(x, A) or isinstance(x, B) or ... (etc.)."}}, {"pk": 647, "model": "website.keyword", "fields": {"category": 2, "codname": "copyright", "slug": "copyright", "description": "interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice."}}, {"pk": 648, "model": "website.keyword", "fields": {"category": 2, "codname": "NameError", "slug": "nameerror", "description": "Name not found globally."}}, {"pk": 649, "model": "website.keyword", "fields": {"category": 2, "codname": "BytesWarning", "slug": "byteswarning", "description": "Base class for warnings about bytes and buffer related problems, mostly\nrelated to conversion from str or comparing to str."}}, {"pk": 650, "model": "website.keyword", "fields": {"category": 2, "codname": "dict", "slug": "dict", "description": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"}}, {"pk": 651, "model": "website.keyword", "fields": {"category": 2, "codname": "input", "slug": "input", "description": "input([prompt]) -> value\n\nEquivalent to eval(raw_input(prompt))."}}, {"pk": 652, "model": "website.keyword", "fields": {"category": 2, "codname": "oct", "slug": "oct", "description": "oct(number) -> string\n\nReturn the octal representation of an integer or long integer."}}, {"pk": 653, "model": "website.keyword", "fields": {"category": 2, "codname": "bin", "slug": "bin", "description": "bin(number) -> string\n\nReturn the binary representation of an integer or long integer."}}, {"pk": 654, "model": "website.keyword", "fields": {"category": 2, "codname": "SystemExit", "slug": "systemexit", "description": "Request to exit from the interpreter."}}, {"pk": 655, "model": "website.keyword", "fields": {"category": 2, "codname": "StandardError", "slug": "standarderror", "description": "Base class for all standard Python exceptions that do not represent\ninterpreter exiting."}}, {"pk": 656, "model": "website.keyword", "fields": {"category": 2, "codname": "format", "slug": "format", "description": "format(value[, format_spec]) -> string\n\nReturns value.__format__(format_spec)\nformat_spec defaults to \"\""}}, {"pk": 657, "model": "website.keyword", "fields": {"category": 2, "codname": "repr", "slug": "repr", "description": "repr(object) -> string\n\nReturn the canonical string representation of the object.\nFor most object types, eval(repr(object)) == object."}}, {"pk": 658, "model": "website.keyword", "fields": {"category": 2, "codname": "sorted", "slug": "sorted", "description": "sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list"}}, {"pk": 659, "model": "website.keyword", "fields": {"category": 2, "codname": "False", "slug": "false", "description": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}}, {"pk": 660, "model": "website.keyword", "fields": {"category": 2, "codname": "RuntimeWarning", "slug": "runtimewarning", "description": "Base class for warnings about dubious runtime behavior."}}, {"pk": 661, "model": "website.keyword", "fields": {"category": 2, "codname": "list", "slug": "list", "description": "list() -> new empty list\nlist(iterable) -> new list initialized from iterable's items"}}, {"pk": 662, "model": "website.keyword", "fields": {"category": 2, "codname": "iter", "slug": "iter", "description": "iter(collection) -> iterator\niter(callable, sentinel) -> iterator\n\nGet an iterator from an object.  In the first form, the argument must\nsupply its own iterator, or be a sequence.\nIn the second form, the callable is called until it returns the sentinel."}}, {"pk": 663, "model": "website.keyword", "fields": {"category": 2, "codname": "reload", "slug": "reload", "description": "reload(module) -> module\n\nReload the module.  The module must have been successfully imported before."}}, {"pk": 664, "model": "website.keyword", "fields": {"category": 2, "codname": "Warning", "slug": "warning", "description": "Base class for warning categories."}}, {"pk": 665, "model": "website.keyword", "fields": {"category": 2, "codname": "round", "slug": "round", "description": "round(number[, ndigits]) -> floating point number\n\nRound a number to a given precision in decimal digits (default 0 digits).\nThis always returns a floating point number.  Precision may be negative."}}, {"pk": 666, "model": "website.keyword", "fields": {"category": 2, "codname": "dir", "slug": "dir", "description": "dir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes."}}, {"pk": 667, "model": "website.keyword", "fields": {"category": 2, "codname": "cmp", "slug": "cmp", "description": "cmp(x, y) -> integer\n\nReturn negative if x<y, zero if x==y, positive if x>y."}}, {"pk": 668, "model": "website.keyword", "fields": {"category": 2, "codname": "set", "slug": "set", "description": "set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements."}}, {"pk": 669, "model": "website.keyword", "fields": {"category": 2, "codname": "bytes", "slug": "bytes", "description": "str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."}}, {"pk": 670, "model": "website.keyword", "fields": {"category": 2, "codname": "reduce", "slug": "reduce", "description": "reduce(function, sequence[, initial]) -> value\n\nApply a function of two arguments cumulatively to the items of a sequence,\nfrom left to right, so as to reduce the sequence to a single value.\nFor example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\nof the sequence in the calculation, and serves as a default when the\nsequence is empty."}}, {"pk": 671, "model": "website.keyword", "fields": {"category": 2, "codname": "intern", "slug": "intern", "description": "intern(string) -> string\n\n``Intern'' the given string.  This enters the string in the (global)\ntable of interned strings whose purpose is to speed up dictionary lookups.\nReturn the string itself or the previously interned string object with the\nsame value."}}, {"pk": 672, "model": "website.keyword", "fields": {"category": 2, "codname": "issubclass", "slug": "issubclass", "description": "issubclass(C, B) -> bool\n\nReturn whether class C is a subclass (i.e., a derived class) of class B.\nWhen using a tuple as the second argument issubclass(X, (A, B, ...)),\nis a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.)."}}, {"pk": 673, "model": "website.keyword", "fields": {"category": 2, "codname": "Ellipsis", "slug": "ellipsis", "description": ""}}, {"pk": 674, "model": "website.keyword", "fields": {"category": 2, "codname": "EOFError", "slug": "eoferror", "description": "Read beyond end of file."}}, {"pk": 675, "model": "website.keyword", "fields": {"category": 2, "codname": "locals", "slug": "locals", "description": "locals() -> dictionary\n\nUpdate and return a dictionary containing the current scope's local variables."}}, {"pk": 676, "model": "website.keyword", "fields": {"category": 2, "codname": "BufferError", "slug": "buffererror", "description": "Buffer error."}}, {"pk": 677, "model": "website.keyword", "fields": {"category": 2, "codname": "slice", "slug": "slice", "description": "slice(stop)\nslice(start, stop[, step])\n\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2])."}}, {"pk": 678, "model": "website.keyword", "fields": {"category": 2, "codname": "FloatingPointError", "slug": "floatingpointerror", "description": "Floating point operation failed."}}, {"pk": 679, "model": "website.keyword", "fields": {"category": 2, "codname": "sum", "slug": "sum", "description": "sum(sequence[, start]) -> value\n\nReturns the sum of a sequence of numbers (NOT strings) plus the value\nof parameter 'start' (which defaults to 0).  When the sequence is\nempty, returns start."}}, {"pk": 680, "model": "website.keyword", "fields": {"category": 2, "codname": "getattr", "slug": "getattr", "description": "getattr(object, name[, default]) -> value\n\nGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\nWhen a default argument is given, it is returned when the attribute doesn't\nexist; without it, an exception is raised in that case."}}, {"pk": 681, "model": "website.keyword", "fields": {"category": 2, "codname": "abs", "slug": "abs", "description": "abs(number) -> number\r\n\r\nReturn the absolute value of the argument."}}, {"pk": 682, "model": "website.keyword", "fields": {"category": 2, "codname": "print", "slug": "print", "description": "print(value, ..., sep=' ', end='\\n', file=sys.stdout)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile: a file-like object (stream); defaults to the current sys.stdout.\nsep:  string inserted between values, default a space.\nend:  string appended after the last value, default a newline."}}, {"pk": 683, "model": "website.keyword", "fields": {"category": 2, "codname": "True", "slug": "true", "description": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}}, {"pk": 684, "model": "website.keyword", "fields": {"category": 2, "codname": "FutureWarning", "slug": "futurewarning", "description": "Base class for warnings about constructs that will change semantically\nin the future."}}, {"pk": 685, "model": "website.keyword", "fields": {"category": 2, "codname": "ImportWarning", "slug": "importwarning", "description": "Base class for warnings about probable mistakes in module imports"}}, {"pk": 686, "model": "website.keyword", "fields": {"category": 2, "codname": "hash", "slug": "hash", "description": "hash(object) -> integer\n\nReturn a hash value for the object.  Two objects with the same value have\nthe same hash value.  The reverse is not necessarily true, but likely."}}, {"pk": 687, "model": "website.keyword", "fields": {"category": 2, "codname": "ReferenceError", "slug": "referenceerror", "description": "Weak ref proxy used after referent went away."}}, {"pk": 688, "model": "website.keyword", "fields": {"category": 2, "codname": "len", "slug": "len", "description": "len(object) -> integer\n\nReturn the number of items of a sequence or mapping."}}, {"pk": 689, "model": "website.keyword", "fields": {"category": 2, "codname": "credits", "slug": "credits", "description": "interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice."}}, {"pk": 690, "model": "website.keyword", "fields": {"category": 2, "codname": "frozenset", "slug": "frozenset", "description": "frozenset() -> empty frozenset object\nfrozenset(iterable) -> frozenset object\n\nBuild an immutable unordered collection of unique elements."}}, {"pk": 691, "model": "website.keyword", "fields": {"category": 2, "codname": "__name__", "slug": "__name__", "description": "str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."}}, {"pk": 692, "model": "website.keyword", "fields": {"category": 2, "codname": "ord", "slug": "ord", "description": "ord(c) -> integer\n\nReturn the integer ordinal of a one-character string."}}, {"pk": 693, "model": "website.keyword", "fields": {"category": 2, "codname": "super", "slug": "super", "description": "super(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type) -> unbound super object\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super(C, self).meth(arg)"}}, {"pk": 694, "model": "website.keyword", "fields": {"category": 2, "codname": "TypeError", "slug": "typeerror", "description": "Inappropriate argument type."}}, {"pk": 695, "model": "website.keyword", "fields": {"category": 2, "codname": "license", "slug": "license", "description": "interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice."}}, {"pk": 696, "model": "website.keyword", "fields": {"category": 2, "codname": "KeyboardInterrupt", "slug": "keyboardinterrupt", "description": "Program interrupted by user."}}, {"pk": 697, "model": "website.keyword", "fields": {"category": 2, "codname": "UserWarning", "slug": "userwarning", "description": "Base class for warnings generated by user code."}}, {"pk": 698, "model": "website.keyword", "fields": {"category": 2, "codname": "filter", "slug": "filter", "description": "filter(function or None, sequence) -> list, tuple, or string\n\nReturn those items of sequence for which function(item) is true.  If\nfunction is None, return the items that are true.  If sequence is a tuple\nor string, return the same type, else return a list."}}, {"pk": 699, "model": "website.keyword", "fields": {"category": 2, "codname": "range", "slug": "range", "description": "range(stop) -> list of integers\nrange(start, stop[, step]) -> list of integers\n\nReturn a list containing an arithmetic progression of integers.\nrange(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\nWhen step is given, it specifies the increment (or decrement).\nFor example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\nThese are exactly the valid indices for a list of 4 elements."}}, {"pk": 700, "model": "website.keyword", "fields": {"category": 2, "codname": "staticmethod", "slug": "staticmethod", "description": "staticmethod(function) -> method\n\nConvert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n     def f(arg1, arg2, ...): ...\n     f = staticmethod(f)\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin."}}, {"pk": 701, "model": "website.keyword", "fields": {"category": 2, "codname": "SystemError", "slug": "systemerror", "description": "Internal error in the Python interpreter.\n\nPlease report this to the Python maintainer, along with the traceback,\nthe Python version, and the hardware/OS platform and version."}}, {"pk": 702, "model": "website.keyword", "fields": {"category": 2, "codname": "BaseException", "slug": "baseexception", "description": "Common base class for all exceptions"}}, {"pk": 703, "model": "website.keyword", "fields": {"category": 2, "codname": "pow", "slug": "pow", "description": "pow(x, y[, z]) -> number\n\nWith two arguments, equivalent to x**y.  With three arguments,\nequivalent to (x**y) % z, but may be more efficient (e.g. for longs)."}}, {"pk": 704, "model": "website.keyword", "fields": {"category": 2, "codname": "RuntimeError", "slug": "runtimeerror", "description": "Unspecified run-time error."}}, {"pk": 705, "model": "website.keyword", "fields": {"category": 2, "codname": "float", "slug": "float", "description": "float(x) -> floating point number\n\nConvert a string or number to a floating point number, if possible."}}, {"pk": 706, "model": "website.keyword", "fields": {"category": 2, "codname": "MemoryError", "slug": "memoryerror", "description": "Out of memory."}}, {"pk": 707, "model": "website.keyword", "fields": {"category": 2, "codname": "StopIteration", "slug": "stopiteration", "description": "Signal the end from iterator.next()."}}, {"pk": 708, "model": "website.keyword", "fields": {"category": 2, "codname": "globals", "slug": "globals", "description": "globals() -> dictionary\n\nReturn the dictionary containing the current scope's global variables."}}, {"pk": 709, "model": "website.keyword", "fields": {"category": 2, "codname": "divmod", "slug": "divmod", "description": "divmod(x, y) -> (quotient, remainder)\n\nReturn the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x."}}, {"pk": 710, "model": "website.keyword", "fields": {"category": 2, "codname": "enumerate", "slug": "enumerate", "description": "enumerate(iterable[, start]) -> iterator for index, value of iterable\n\nReturn an enumerate object.  iterable must be another object that supports\niteration.  The enumerate object yields pairs containing a count (from\nstart, which defaults to zero) and a value yielded by the iterable argument.\nenumerate is useful for obtaining an indexed list:\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ..."}}, {"pk": 711, "model": "website.keyword", "fields": {"category": 2, "codname": "apply", "slug": "apply", "description": "apply(object[, args[, kwargs]]) -> value\n\nCall a callable object with positional arguments taken from the tuple args,\nand keyword arguments taken from the optional dictionary kwargs.\nNote that classes are callable, as are instances with a __call__() method.\n\nDeprecated since release 2.3. Instead, use the extended call syntax:\n    function(*args, **keywords)."}}, {"pk": 712, "model": "website.keyword", "fields": {"category": 2, "codname": "LookupError", "slug": "lookuperror", "description": "Base class for lookup errors."}}, {"pk": 713, "model": "website.keyword", "fields": {"category": 2, "codname": "open", "slug": "open", "description": "open(name[, mode[, buffering]]) -> file object\n\nOpen a file using the file() type, returns a file object.  This is the\npreferred way to open a file.  See file.__doc__ for further information."}}, {"pk": 714, "model": "website.keyword", "fields": {"category": 2, "codname": "basestring", "slug": "basestring", "description": "Type basestring cannot be instantiated; it is the base for str and unicode."}}, {"pk": 715, "model": "website.keyword", "fields": {"category": 2, "codname": "UnicodeError", "slug": "unicodeerror", "description": "Unicode related error."}}, {"pk": 716, "model": "website.keyword", "fields": {"category": 2, "codname": "zip", "slug": "zip", "description": "zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]\n\nReturn a list of tuples, where each tuple contains the i-th element\nfrom each of the argument sequences.  The returned list is truncated\nin length to the length of the shortest argument sequence."}}, {"pk": 717, "model": "website.keyword", "fields": {"category": 2, "codname": "hex", "slug": "hex", "description": "hex(number) -> string\n\nReturn the hexadecimal representation of an integer or long integer."}}, {"pk": 718, "model": "website.keyword", "fields": {"category": 2, "codname": "long", "slug": "long", "description": "long(x=0) -> long\nlong(x, base=10) -> long\n\nConvert a number or string to a long integer, or return 0L if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4L"}}, {"pk": 719, "model": "website.keyword", "fields": {"category": 2, "codname": "next", "slug": "next", "description": "next(iterator[, default])\n\nReturn the next item from the iterator. If default is given and the iterator\nis exhausted, it is returned instead of raising StopIteration."}}, {"pk": 720, "model": "website.keyword", "fields": {"category": 2, "codname": "ImportError", "slug": "importerror", "description": "Import can't find module, or can't find name in module."}}, {"pk": 721, "model": "website.keyword", "fields": {"category": 2, "codname": "chr", "slug": "chr", "description": "chr(i) -> character\n\nReturn a string of one character with ordinal i; 0 <= i < 256."}}, {"pk": 722, "model": "website.keyword", "fields": {"category": 2, "codname": "xrange", "slug": "xrange", "description": "xrange(stop) -> xrange object\nxrange(start, stop[, step]) -> xrange object\n\nLike range(), but instead of returning a list, returns an object that\ngenerates the numbers in the range on demand.  For looping, this is \nslightly faster than range() and more memory efficient."}}, {"pk": 723, "model": "website.keyword", "fields": {"category": 2, "codname": "type", "slug": "type", "description": "type(object) -> the object's type\ntype(name, bases, dict) -> a new type"}}, {"pk": 724, "model": "website.keyword", "fields": {"category": 2, "codname": "__doc__", "slug": "__doc__", "description": "str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."}}, {"pk": 725, "model": "website.keyword", "fields": {"category": 2, "codname": "Exception", "slug": "exception", "description": "Common base class for all non-exit exceptions."}}, {"pk": 726, "model": "website.keyword", "fields": {"category": 2, "codname": "tuple", "slug": "tuple", "description": "tuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\nIf the argument is a tuple, the return value is the same object."}}, {"pk": 727, "model": "website.keyword", "fields": {"category": 2, "codname": "UnicodeTranslateError", "slug": "unicodetranslateerror", "description": "Unicode translation error."}}, {"pk": 728, "model": "website.keyword", "fields": {"category": 2, "codname": "reversed", "slug": "reversed", "description": "reversed(sequence) -> reverse iterator over values of the sequence\n\nReturn a reverse iterator"}}, {"pk": 729, "model": "website.keyword", "fields": {"category": 2, "codname": "UnicodeEncodeError", "slug": "unicodeencodeerror", "description": "Unicode encoding error."}}, {"pk": 730, "model": "website.keyword", "fields": {"category": 2, "codname": "IOError", "slug": "ioerror", "description": "I/O operation failed."}}, {"pk": 731, "model": "website.keyword", "fields": {"category": 2, "codname": "hasattr", "slug": "hasattr", "description": "hasattr(object, name) -> bool\n\nReturn whether the object has an attribute with the given name.\n(This is done by calling getattr(object, name) and catching exceptions.)"}}, {"pk": 732, "model": "website.keyword", "fields": {"category": 2, "codname": "delattr", "slug": "delattr", "description": "delattr(object, name)\n\nDelete a named attribute on an object; delattr(x, 'y') is equivalent to\n``del x.y''."}}, {"pk": 733, "model": "website.keyword", "fields": {"category": 2, "codname": "setattr", "slug": "setattr", "description": "setattr(object, name, value)\n\nSet a named attribute on an object; setattr(x, 'y', v) is equivalent to\n``x.y = v''."}}, {"pk": 734, "model": "website.keyword", "fields": {"category": 2, "codname": "raw_input", "slug": "raw_input", "description": "raw_input([prompt]) -> string\n\nRead a string from standard input.  The trailing newline is stripped.\nIf the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.\nOn Unix, GNU readline is used if enabled.  The prompt string, if given,\nis printed without a trailing newline before reading."}}, {"pk": 735, "model": "website.keyword", "fields": {"category": 2, "codname": "SyntaxWarning", "slug": "syntaxwarning", "description": "Base class for warnings about dubious syntax."}}, {"pk": 736, "model": "website.keyword", "fields": {"category": 2, "codname": "compile", "slug": "compile", "description": "compile(source, filename, mode[, flags[, dont_inherit]]) -> code object\n\nCompile the source string (a Python module, statement or expression)\ninto a code object that can be executed by the exec statement or eval().\nThe filename will be used for run-time error messages.\nThe mode must be 'exec' to compile a module, 'single' to compile a\nsingle (interactive) statement, or 'eval' to compile an expression.\nThe flags argument, if present, controls which future statements influence\nthe compilation of the code.\nThe dont_inherit argument, if non-zero, stops the compilation inheriting\nthe effects of any future statements in effect in the code calling\ncompile; if absent or zero these statements do influence the compilation,\nin addition to any features explicitly specified."}}, {"pk": 737, "model": "website.keyword", "fields": {"category": 2, "codname": "ArithmeticError", "slug": "arithmeticerror", "description": "Base class for arithmetic errors."}}, {"pk": 738, "model": "website.keyword", "fields": {"category": 2, "codname": "str", "slug": "str", "description": "str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."}}, {"pk": 739, "model": "website.keyword", "fields": {"category": 2, "codname": "property", "slug": "property", "description": "property(fget=None, fset=None, fdel=None, doc=None) -> property attribute\n\nfget is a function to be used for getting an attribute value, and likewise\nfset is a function for setting, and fdel a function for del'ing, an\nattribute.  Typical use is to define a managed attribute x:\nclass C(object):\n    def getx(self): return self._x\n    def setx(self, value): self._x = value\n    def delx(self): del self._x\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n\nDecorators make defining new properties or modifying existing ones easy:\nclass C(object):\n    @property\n    def x(self): return self._x\n    @x.setter\n    def x(self, value): self._x = value\n    @x.deleter\n    def x(self): del self._x\n"}}, {"pk": 740, "model": "website.keyword", "fields": {"category": 2, "codname": "GeneratorExit", "slug": "generatorexit", "description": "Request that a generator exit."}}, {"pk": 741, "model": "website.keyword", "fields": {"category": 2, "codname": "int", "slug": "int", "description": "int(x=0) -> int or long\nint(x, base=10) -> int or long\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"}}, {"pk": 742, "model": "website.keyword", "fields": {"category": 2, "codname": "__import__", "slug": "__import__", "description": "__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module\n\nImport a module. Because this function is meant for use by the Python\ninterpreter and not for general use it is better to use\nimportlib.import_module() to programmatically import a module.\n\nThe globals argument is only used to determine the context;\nthey are not modified.  The locals argument is unused.  The fromlist\nshould be a list of names to emulate ``from name import ...'', or an\nempty list to emulate ``import name''.\nWhen importing a module from a package, note that __import__('A.B', ...)\nreturns package A when fromlist is empty, but its submodule B when\nfromlist is not empty.  Level is used to determine whether to perform \nabsolute or relative imports.  -1 is the original strategy of attempting\nboth absolute and relative imports, 0 is absolute, a positive number\nis the number of parent directories to search relative to the current module."}}, {"pk": 743, "model": "website.keyword", "fields": {"category": 2, "codname": "KeyError", "slug": "keyerror", "description": "Mapping key not found."}}, {"pk": 744, "model": "website.keyword", "fields": {"category": 2, "codname": "coerce", "slug": "coerce", "description": "coerce(x, y) -> (x1, y1)\n\nReturn a tuple consisting of the two numeric arguments converted to\na common type, using the same rules as used by arithmetic operations.\nIf coercion is not possible, raise TypeError."}}, {"pk": 745, "model": "website.keyword", "fields": {"category": 2, "codname": "PendingDeprecationWarning", "slug": "pendingdeprecationwarning", "description": "Base class for warnings about features which will be deprecated\nin the future."}}, {"pk": 746, "model": "website.keyword", "fields": {"category": 2, "codname": "file", "slug": "file", "description": "file(name[, mode[, buffering]]) -> file object\n\nOpen a file.  The mode can be 'r', 'w' or 'a' for reading (default),\nwriting or appending.  The file will be created if it doesn't exist\nwhen opened for writing or appending; it will be truncated when\nopened for writing.  Add a 'b' to the mode for binary files.\nAdd a '+' to the mode to allow simultaneous reading and writing.\nIf the buffering argument is given, 0 means unbuffered, 1 means line\nbuffered, and larger numbers specify the buffer size.  The preferred way\nto open a file is with the builtin open() function.\nAdd a 'U' to mode to open the file for input with universal newline\nsupport.  Any line ending in the input file will be seen as a '\\n'\nin Python.  Also, a file so opened gains the attribute 'newlines';\nthe value for this attribute is one of None (no newline read yet),\n'\\r', '\\n', '\\r\\n' or a tuple containing all the newline types seen.\n\n'U' cannot be combined with 'w' or '+' mode.\n"}}, {"pk": 747, "model": "website.keyword", "fields": {"category": 2, "codname": "EnvironmentError", "slug": "environmenterror", "description": "Base class for I/O related errors."}}, {"pk": 748, "model": "website.keyword", "fields": {"category": 2, "codname": "unichr", "slug": "unichr", "description": "unichr(i) -> Unicode character\n\nReturn a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff."}}, {"pk": 749, "model": "website.keyword", "fields": {"category": 2, "codname": "id", "slug": "id", "description": "id(object) -> integer\n\nReturn the identity of an object.  This is guaranteed to be unique among\nsimultaneously existing objects.  (Hint: it's the object's memory address.)"}}, {"pk": 750, "model": "website.keyword", "fields": {"category": 2, "codname": "OSError", "slug": "oserror", "description": "OS system call failed."}}, {"pk": 751, "model": "website.keyword", "fields": {"category": 2, "codname": "DeprecationWarning", "slug": "deprecationwarning", "description": "Base class for warnings about deprecated features."}}, {"pk": 752, "model": "website.keyword", "fields": {"category": 2, "codname": "min", "slug": "min", "description": "min(iterable[, key=func]) -> value\nmin(a, b, c, ...[, key=func]) -> value\n\nWith a single iterable argument, return its smallest item.\nWith two or more arguments, return the smallest argument."}}, {"pk": 753, "model": "website.keyword", "fields": {"category": 2, "codname": "UnicodeWarning", "slug": "unicodewarning", "description": "Base class for warnings about Unicode related problems, mostly\nrelated to conversion problems."}}, {"pk": 754, "model": "website.keyword", "fields": {"category": 2, "codname": "execfile", "slug": "execfile", "description": "execfile(filename[, globals[, locals]])\n\nRead and execute a Python script from a file.\nThe globals and locals are dictionaries, defaulting to the current\nglobals and locals.  If only globals is given, locals defaults to it."}}, {"pk": 755, "model": "website.keyword", "fields": {"category": 2, "codname": "any", "slug": "any", "description": "any(iterable) -> bool\n\nReturn True if bool(x) is True for any x in the iterable.\nIf the iterable is empty, return False."}}, {"pk": 756, "model": "website.keyword", "fields": {"category": 2, "codname": "complex", "slug": "complex", "description": "complex(real[, imag]) -> complex number\n\nCreate a complex number from a real part and an optional imaginary part.\nThis is equivalent to (real + imag*1j) where imag defaults to 0."}}, {"pk": 757, "model": "website.keyword", "fields": {"category": 2, "codname": "bool", "slug": "bool", "description": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}}, {"pk": 758, "model": "website.keyword", "fields": {"category": 2, "codname": "ValueError", "slug": "valueerror", "description": "Inappropriate argument value (of correct type)."}}, {"pk": 759, "model": "website.keyword", "fields": {"category": 2, "codname": "NotImplemented", "slug": "notimplemented", "description": ""}}, {"pk": 760, "model": "website.keyword", "fields": {"category": 2, "codname": "map", "slug": "map", "description": "map(function, sequence[, sequence, ...]) -> list\n\nReturn a list of the results of applying the function to the items of\nthe argument sequence(s).  If more than one sequence is given, the\nfunction is called with an argument list consisting of the corresponding\nitem of each sequence, substituting None for missing values when not all\nsequences have the same length.  If the function is None, return a list of\nthe items of the sequence (or a list of tuples if more than one sequence)."}}, {"pk": 761, "model": "website.keyword", "fields": {"category": 2, "codname": "buffer", "slug": "buffer", "description": "buffer(object [, offset[, size]])\n\nCreate a new buffer object which references the given object.\nThe buffer will reference a slice of the target object from the\nstart of the object (or at the specified offset). The slice will\nextend to the end of the target object (or with the specified size)."}}, {"pk": 762, "model": "website.keyword", "fields": {"category": 2, "codname": "max", "slug": "max", "description": "max(iterable[, key=func]) -> value\nmax(a, b, c, ...[, key=func]) -> value\n\nWith a single iterable argument, return its largest item.\nWith two or more arguments, return the largest argument."}}, {"pk": 763, "model": "website.keyword", "fields": {"category": 2, "codname": "object", "slug": "object", "description": "The most base type"}}, {"pk": 764, "model": "website.keyword", "fields": {"category": 2, "codname": "TabError", "slug": "taberror", "description": "Improper mixture of spaces and tabs."}}, {"pk": 765, "model": "website.keyword", "fields": {"category": 2, "codname": "callable", "slug": "callable", "description": "callable(object) -> bool\n\nReturn whether the object is callable (i.e., some kind of function).\nNote that classes are callable, as are instances with a __call__() method."}}, {"pk": 766, "model": "website.keyword", "fields": {"category": 2, "codname": "ZeroDivisionError", "slug": "zerodivisionerror", "description": "Second argument to a division or modulo operation was zero."}}, {"pk": 767, "model": "website.keyword", "fields": {"category": 2, "codname": "eval", "slug": "eval", "description": "eval(source[, globals[, locals]]) -> value\n\nEvaluate the source in the context of globals and locals.\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.\n"}}, {"pk": 768, "model": "website.keyword", "fields": {"category": 2, "codname": "__debug__", "slug": "__debug__", "description": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed."}}, {"pk": 769, "model": "website.keyword", "fields": {"category": 2, "codname": "IndentationError", "slug": "indentationerror", "description": "Improper indentation."}}, {"pk": 770, "model": "website.keyword", "fields": {"category": 2, "codname": "AssertionError", "slug": "assertionerror", "description": "Assertion failed."}}, {"pk": 771, "model": "website.keyword", "fields": {"category": 2, "codname": "classmethod", "slug": "classmethod", "description": "classmethod(function) -> method\n\nConvert a function to be a class method.\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n  class C:\n      def f(cls, arg1, arg2, ...): ...\n      f = classmethod(f)\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin."}}, {"pk": 772, "model": "website.keyword", "fields": {"category": 2, "codname": "UnboundLocalError", "slug": "unboundlocalerror", "description": "Local name referenced but not bound to a value."}}, {"pk": 773, "model": "website.keyword", "fields": {"category": 2, "codname": "NotImplementedError", "slug": "notimplementederror", "description": "Method or function hasn't been implemented yet."}}, {"pk": 774, "model": "website.keyword", "fields": {"category": 2, "codname": "AttributeError", "slug": "attributeerror", "description": "Attribute not found."}}, {"pk": 775, "model": "website.keyword", "fields": {"category": 2, "codname": "OverflowError", "slug": "overflowerror", "description": "Result too large to be represented."}}]